{"version":3,"sources":["views/Reports/api.js","views/Reports/api/branch_summary.js","views/Reports/api/risk_trigger.js","views/Reports/api/branch_categorization.js","views/Reports/api/ho_summary.js","views/Reports/util/getDates.js","../node_modules/reactstrap/es/TabContext.js","../node_modules/@linways/table-to-excel/dist sync","../node_modules/reactstrap/es/TabContent.js","../node_modules/reactstrap/es/TabPane.js","views/Reports/BranchCategorization.js","views/Reports/BranchCategorizationSummary.js","views/Reports/BranchGrading.js","views/Reports/BranchDetails.js"],"names":["url","urlData","log","require","branchSummary","downloadBranchSummary","saveBranchSummary","getRiskTriggers","getRiskTriggerData","branchCategorization","downloadBranchCategorization","saveBranchCategorization","hoSummary","getReportOutputs","options","a","async","server","get","params","json","data","getAllRiskRegister","getAuditLog","callback","then","catch","err","console","error","saveGrading","post","JSON","stringify","riskTrigger","riskTriggerData","bs2ad","ad2bs","moment","QUARTER_ONE","QUARTER_TWO","QUARTER_THREE","QUARTER_FOUR","getFormattedDate","ad","year","month","day","format","getStartQuarter","bs","en","quarter","getQuarter","getQuarterByAD","getBSDate","TabContext","React","createContext","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","propTypes","tag","tagPropType","activeTab","PropTypes","any","className","string","cssModule","object","TabContent","_Component","props","_this","call","this","state","_inheritsLoose","getDerivedStateFromProps","nextProps","prevState","prototype","render","_this$props","Tag","attributes","omit","Object","classes","mapToCssModules","classNames","createElement","Provider","value","activeTabId","_extends","Component","polyfill","defaultProps","tabId","TabPane","_objectWithoutPropertiesLoose","getClasses","active","Consumer","_ref","CategorizationTable","Table","responsive","bordered","map","branch","index","categorizationArr","category","i","key","name","initial","screening","result","final","BranchCategorization","downloadReport","actual","previous","estimated","startDate","path","window","open","process","saveReport","confirm","alert","message","Card","CardHeader","Row","Col","Button","onClick","toggleCollapse","size","color","Collapse","isOpen","first","CardBody","Nav","tabs","NavItem","NavLink","classnames","toggleTab","CardFooter","BranchCategorizationSummary","TableToExcel","convert","document","getElementById","second","data-f-bold","rowSpan","colSpan","BranchGrading","getGrade","other","lowerLimit","getGradeString","branchId","estimatedVsActual","previousVsActual","type","p","permissions","third","isApprover","BranchDetails","handleDateChange","target","bsDate","length","adDate","setState","updateData","tab","position","md","Label","InputGroup","InputGroupAddon","addonType","Input","onChange","maxLength","minLength","placeholder"],"mappings":"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","file":"static/js/18.26cd1fe2.chunk.js","sourcesContent":["import { server } from \"../../config/server\";\r\nconst url = \"/report\";\r\nconst urlData = \"/risk-register-all\";\r\nconst log = \"/audit-log\";\r\nconst {\r\n  branchSummary,\r\n  downloadBranchSummary,\r\n  saveBranchSummary\r\n} = require(\"./api/branch_summary\");\r\nconst { getRiskTriggers, getRiskTriggerData } = require(\"./api/risk_trigger\");\r\nconst {\r\n  branchCategorization,\r\n  downloadBranchCategorization,\r\n  saveBranchCategorization\r\n} = require(\"./api/branch_categorization\");\r\nconst { hoSummary } = require(\"./api/ho_summary\");\r\n\r\nasync function getReportOutputs(options) {\r\n  const json = await server.get(`${url}/report-outputs`, {\r\n    params: options\r\n  });\r\n  return json.data;\r\n}\r\n\r\nasync function getAllRiskRegister(options) {\r\n  const json = await server.get(`${urlData}`, { params: options });\r\n  return json.data;\r\n}\r\n\r\nfunction getAuditLog(callback) {\r\n  server\r\n    .get(`${log}`)\r\n    .then(function(json) {\r\n      // console.log(json.data);\r\n      return callback(null, json.data);\r\n    })\r\n    .catch(function(err) {\r\n      console.error(\"Error getting data from all risk Register!\");\r\n    });\r\n}\r\n\r\nasync function saveGrading(data, options) {\r\n  const json = await server.post(`${url}/grading`, {\r\n    ...options,\r\n    data: data\r\n  });\r\n  return json.data;\r\n}\r\n\r\nexport {\r\n  getAllRiskRegister,\r\n  getAuditLog,\r\n  getReportOutputs,\r\n  // BRANCH SUMMARY\r\n  branchSummary,\r\n  downloadBranchSummary,\r\n  saveBranchSummary,\r\n  // BRANCH CATEGORIZATION\r\n  branchCategorization,\r\n  downloadBranchCategorization,\r\n  saveBranchCategorization,\r\n  // HO Summary\r\n  hoSummary,\r\n  //saving report\r\n  saveGrading,\r\n  //Risk Trigger\r\n  getRiskTriggers,\r\n  getRiskTriggerData\r\n};\r\n","import { server } from \"../../../config/server\";\r\nconst url = \"/report\";\r\n\r\n/**\r\n * \r\n * @param {Object} options\r\n * @param {Number} options.branchId   - Branch ID whose report is to be calculated\r\n * @param {Number} options.frequency  - QUARTERLY, HALF_YEARLY, YEARLY (in months)\r\n * @param {String} options.status     - DRAFT, PENDING, UNAPPROVED, APPROVED (Risk Register status)\r\n * @param {String} options.mergeType  - avg, min, max (Merge Function Types)\r\n * @param {Date}   options.startDate    - Base date to calculate the report Data\r\n * \r\n */\r\nasync function branchSummary(options) {\r\n    const json = await server.get(\r\n        `${url}/branch-summary`,\r\n        {\r\n            params: options\r\n        }\r\n    );\r\n    return json.data;\r\n}\r\n\r\nasync function downloadBranchSummary(data) {\r\n    const json = await server.post(\r\n        `${url}/branch-summary/download`,\r\n        JSON.stringify(data)\r\n    );\r\n    return json.data;\r\n}\r\n\r\nasync function saveBranchSummary(data) {\r\n    const json = await server.post(\r\n        `${url}/branch-summary/save`,\r\n        JSON.stringify(data)\r\n    );\r\n    return json.data;\r\n}\r\n\r\nexport {\r\n    branchSummary,\r\n    downloadBranchSummary,\r\n    saveBranchSummary\r\n}\r\n","import { server } from \"../../../config/server\";\r\nconst riskTrigger = \"report/risk-trigger\";\r\nconst riskTriggerData = \"report/risk-trigger/data\";\r\n\r\nasync function getRiskTriggerData(options) {\r\n    return server.get(`${riskTriggerData}`, { params: options });\r\n}\r\n\r\nfunction getRiskTriggers(callback) {\r\n    server\r\n        .get(`${riskTrigger}`)\r\n        .then(function (json) {\r\n            callback(null, json.data);\r\n        })\r\n        .catch(function (err) {\r\n            callback(err);\r\n        });\r\n}\r\n\r\nexport {\r\n    getRiskTriggers,\r\n    getRiskTriggerData,\r\n}","import { server } from \"../../../config/server\";\r\nconst url = \"/report\";\r\n\r\n/**\r\n * \r\n * @param {Object} options\r\n * @param {Number} options.branchId   - Branch ID whose report is to be calculated\r\n * @param {Date}   options.thisQuarter    - Base date to calculate the report Data\r\n * \r\n */\r\nasync function branchCategorization(options) {\r\n    const json = await server.get(\r\n        `${url}/branch-categorization`,\r\n        {\r\n            params: options\r\n        }\r\n    );\r\n    return json.data;\r\n}\r\n\r\nasync function downloadBranchCategorization(data) {\r\n    const json = await server.post(\r\n        `${url}/branch-categorization/download`,\r\n        JSON.stringify(data)\r\n    );\r\n    return json.data;\r\n}\r\n\r\nasync function saveBranchCategorization(data) {\r\n    const json = await server.post(\r\n        `${url}/branch-categorization/save`,\r\n        JSON.stringify(data)\r\n    );\r\n    return json.data;\r\n}\r\n\r\nexport {\r\n    branchCategorization,\r\n    downloadBranchCategorization,\r\n    saveBranchCategorization,\r\n}","import { server } from \"../../../config/server\";\r\nconst url = \"/report\";\r\n\r\n/**\r\n * \r\n * @param {Object} options\r\n * @param {Number} options.frequency  - QUARTERLY, HALF_YEARLY, YEARLY (in months)\r\n * @param {String} options.status     - DRAFT, PENDING, UNAPPROVED, APPROVED (Risk Register status)\r\n * @param {Date}   options.startDate  - Base date to calculate the report Data\r\n * \r\n */\r\nasync function hoSummary(options) {\r\n    const json = await server.get(\r\n        `${url}/ho-summary`,\r\n        {\r\n            params: options\r\n        }\r\n    );\r\n    return json.data;\r\n}\r\n\r\nexport {\r\n    hoSummary\r\n}","const bs2ad = require('ad-bs-converter').bs2ad;\r\nconst ad2bs = require('ad-bs-converter').ad2bs;\r\nconst moment = require('moment');\r\n\r\nconst QUARTER_ONE = \"/04/01\";\r\nconst QUARTER_TWO = \"/07/01\";\r\nconst QUARTER_THREE = \"/10/01\";\r\nconst QUARTER_FOUR = \"/01/01\";\r\n\r\n/**\r\n * \r\n * @param {Object} ad - AD date object converted from bs date using ad-bs-converter \r\n * @returns {String} Well formatted AD Date in YYYY-MM-DD\r\n */\r\nconst getFormattedDate = (ad) => {\r\n    const year = ad.year;\r\n    const month = ad.month;\r\n    const day = ad.day;\r\n    return moment(year + \" \" + month + \" \" + day, \"YYYY MM DD\").format('YYYY-MM-DD');\r\n}\r\n\r\n/**\r\n * @returns Quarter start date in AD of this running month\r\n */\r\nconst getStartQuarter = () => {\r\n    const bs = ad2bs(moment().format(\"YYYY/MM/DD\"));\r\n    const year = bs.en.year;\r\n    const quarter = getQuarter(bs);\r\n    return getFormattedDate(bs2ad(year + quarter));\r\n}\r\n\r\n/**\r\n * \r\n * @param {Date} ad - Well formatted AD Date in YYYY-MM-DD\r\n * @returns Returns in which quarter does the date lies\r\n */\r\nconst getQuarterByAD = (ad) => {\r\n    const bs = ad2bs(moment(ad).format(\"YYYY/MM/DD\"));\r\n    return getQuarter(bs);\r\n}\r\n\r\n/**\r\n * \r\n * @param {Object} bs - Object of BS date from ad-bs-converter\r\n * @returns Returns in which quarter does the date lies\r\n */\r\nconst getQuarter = (bs) => {\r\n    const month = bs.en.month;\r\n    if (month >= 10) {\r\n        return QUARTER_THREE;\r\n    } else if (month >= 7) {\r\n        return QUARTER_TWO;\r\n    } else if (month >= 4) {\r\n        return QUARTER_ONE;\r\n    } else {\r\n        return QUARTER_FOUR;\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * @param {Date} ad Well formatted (YYYY-MM-DD) AD Date\r\n * @returns BS Date object in `en`\r\n */\r\nconst getBSDate = (ad) => {\r\n    const bs = ad2bs(moment(ad).format(\"YYYY/MM/DD\"));\r\n    return bs.en;\r\n}\r\n\r\nexport {\r\n    getStartQuarter,\r\n    getBSDate,\r\n    getQuarterByAD,\r\n    getFormattedDate,\r\n    QUARTER_ONE,\r\n    QUARTER_TWO,\r\n    QUARTER_THREE,\r\n    QUARTER_FOUR,\r\n}","import React from 'react';\n/**\n * TabContext\n * {\n *  activeTabId: PropTypes.any\n * }\n */\n\nexport var TabContext = React.createContext({});","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 607;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport React, { Component } from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { TabContext } from './TabContext';\nimport { mapToCssModules, omit, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  activeTab: PropTypes.any,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar TabContent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(TabContent, _Component);\n\n  TabContent.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {\n    if (prevState.activeTab !== nextProps.activeTab) {\n      return {\n        activeTab: nextProps.activeTab\n      };\n    }\n\n    return null;\n  };\n\n  function TabContent(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.state = {\n      activeTab: _this.props.activeTab\n    };\n    return _this;\n  }\n\n  var _proto = TabContent.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        cssModule = _this$props.cssModule,\n        Tag = _this$props.tag;\n    var attributes = omit(this.props, Object.keys(propTypes));\n    var classes = mapToCssModules(classNames('tab-content', className), cssModule);\n    return React.createElement(TabContext.Provider, {\n      value: {\n        activeTabId: this.state.activeTab\n      }\n    }, React.createElement(Tag, _extends({}, attributes, {\n      className: classes\n    })));\n  };\n\n  return TabContent;\n}(Component);\n\npolyfill(TabContent);\nexport default TabContent;\nTabContent.propTypes = propTypes;\nTabContent.defaultProps = defaultProps;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { TabContext } from './TabContext';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  tabId: PropTypes.any\n};\nvar defaultProps = {\n  tag: 'div'\n};\nexport default function TabPane(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      tabId = props.tabId,\n      Tag = props.tag,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tabId\", \"tag\"]);\n\n  var getClasses = function getClasses(activeTabId) {\n    return mapToCssModules(classNames('tab-pane', className, {\n      active: tabId === activeTabId\n    }), cssModule);\n  };\n\n  return React.createElement(TabContext.Consumer, null, function (_ref) {\n    var activeTabId = _ref.activeTabId;\n    return React.createElement(Tag, _extends({}, attributes, {\n      className: getClasses(activeTabId)\n    }));\n  });\n}\nTabPane.propTypes = propTypes;\nTabPane.defaultProps = defaultProps;","import React from 'react';\r\nimport {\r\n    Table,\r\n    Row, Col,\r\n    Button,\r\n    Card, Collapse,\r\n    Nav, NavItem, NavLink,\r\n    TabContent, TabPane,\r\n    CardHeader, CardBody, CardFooter,\r\n} from 'reactstrap';\r\nimport classnames from 'classnames';\r\nimport { downloadBranchCategorization, saveBranchCategorization } from './api';\r\n\r\n/**\r\n * \r\n * @param {Array} param0 - Array of categorization data for branches actual, previous and, estimated\r\n */\r\nconst CategorizationTable = ({ data }) => {\r\n    return (\r\n        <Table responsive bordered>\r\n            <thead>\r\n                <tr>\r\n                    <th>S.N.</th>\r\n                    <th>Branch Name</th>\r\n                    {data.map((branch, index) =>\r\n                        branch.categorizationArr.map((category, i) => {\r\n                            return (\r\n                                <th key={index}>\r\n                                    {i + 1}\r\n                                </th>\r\n                            )\r\n                        })\r\n                    )}\r\n                    <th>Initial</th>\r\n                    <th>Screening</th>\r\n                    <th>Result</th>\r\n                    <th>Final</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {data.map((branch, index) =>\r\n                    <tr key={branch.id}>\r\n                        <td>{index + 1}</td>\r\n                        <td>{branch.name}</td>\r\n                        {branch.categorizationArr.map((category, i) => {\r\n                            return (\r\n                                <td key={i}>\r\n                                    {category.name}\r\n                                </td>\r\n                            )\r\n                        })}\r\n                        <td>\r\n                            {branch.initial ? branch.initial.name : \"\"}\r\n                        </td>\r\n                        <td>\r\n                            {branch.screening ? branch.screening.name : \"\"}\r\n                        </td>\r\n                        <td>\r\n                            {branch.result ? branch.result.name : \"\"}\r\n                        </td>\r\n                        <td>\r\n                            {branch.final ? branch.final.name : \"\"}\r\n                        </td>\r\n                    </tr>\r\n                )}\r\n            </tbody>\r\n        </Table>\r\n    );\r\n}\r\n\r\nexport default class BranchCategorization extends React.Component {\r\n\r\n    downloadReport = () => {\r\n        downloadBranchCategorization({\r\n            actual: this.props.actual,\r\n            previous: this.props.previous,\r\n            estimated: this.props.estimated,\r\n            startDate: this.props.startDate,\r\n        }).then(data => {\r\n            const path = data.path;\r\n            window.open(process.env.REACT_APP_SERVER_URL + `/${path}`);\r\n        }).catch(() => { });\r\n    }\r\n\r\n    saveReport = () => {\r\n        if (window.confirm(\"Do you want to save this report?\")) {\r\n            saveBranchCategorization({\r\n                actual: this.props.actual,\r\n                previous: this.props.previous,\r\n                estimated: this.props.estimated,\r\n                startDate: this.props.startDate,\r\n            }).then(data => {\r\n                window.alert(data.message);\r\n            }).catch(() => { });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // const p = this.props.permissions;\r\n        return (\r\n            <Card>\r\n                <CardHeader>\r\n                    <Row>\r\n                        <Col>\r\n                            Branch Categorization\r\n                            </Col>\r\n                        <Col>\r\n                            <Button\r\n                                onClick={() => this.props.toggleCollapse('first')}\r\n                                className=\"float-right text-white\"\r\n                                size=\"sm\" color=\"info\">\r\n                                <i className=\"fa fa-bars\" />\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </CardHeader>\r\n                <Collapse isOpen={this.props.isOpen.first}>\r\n                    <CardBody>\r\n                        <Nav tabs>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    className={classnames({ active: this.props.activeTab.first === '1' })}\r\n                                    onClick={() => { this.props.toggleTab('1', 'first'); }}>\r\n                                    Actual Risk Score\r\n                            </NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    className={classnames({ active: this.props.activeTab.first === '2' })}\r\n                                    onClick={() => { this.props.toggleTab('2', 'first'); }}>\r\n                                    Previous Risk Score\r\n                            </NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    className={classnames({ active: this.props.activeTab.first === '3' })}\r\n                                    onClick={() => { this.props.toggleTab('3', 'first'); }}>\r\n                                    Estimated Risk Score\r\n                            </NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                        <TabContent activeTab={this.props.activeTab.first}>\r\n                            <TabPane tabId=\"1\">\r\n                                <CategorizationTable data={this.props.actual} />\r\n                            </TabPane>\r\n                            <TabPane tabId=\"2\">\r\n                                <CategorizationTable data={this.props.previous} />\r\n                            </TabPane>\r\n                            <TabPane tabId=\"3\">\r\n                                <CategorizationTable data={this.props.estimated} />\r\n                            </TabPane>\r\n                        </TabContent>\r\n                    </CardBody>\r\n                </Collapse>\r\n                <CardFooter>\r\n                    <Button className=\"mx-2\" color=\"info\" onClick={this.downloadReport}>\r\n                        <i className=\"fa fa-download text-white\" />\r\n                    </Button>\r\n                </CardFooter>\r\n            </Card>\r\n        );\r\n    }\r\n\r\n}","import React from 'react';\r\nimport {\r\n    Table,\r\n    Row, Col,\r\n    Button,\r\n    Card, Collapse,\r\n    CardHeader, CardBody, CardFooter,\r\n} from 'reactstrap';\r\nimport TableToExcel from '@linways/table-to-excel';\r\n\r\nexport default class BranchCategorizationSummary extends React.Component {\r\n    downloadReport = () => {\r\n        TableToExcel.convert(document.getElementById(\"branch-categorization-summary\"), {\r\n            name: 'branch-categorization-summary.xlsx'\r\n        });\r\n    }\r\n\r\n    saveReport = () => {\r\n        if (window.confirm(\"Do you want to save this report?\")) {\r\n            // saveBranchCategorization({\r\n            //     actual: this.props.actual,\r\n            //     previous: this.props.previous,\r\n            //     estimated: this.props.estimated,\r\n            //     startDate: this.props.startDate,\r\n            // }).then(data => {\r\n            //     window.alert(data.message);\r\n            // }).catch(() => { });\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Card>\r\n                <CardHeader>\r\n                    <Row>\r\n                        <Col>\r\n                            Branch Categorization Summary\r\n                            </Col>\r\n                        <Col>\r\n                            <Button\r\n                                onClick={() => this.props.toggleCollapse('second')}\r\n                                className=\"float-right text-white\"\r\n                                size=\"sm\" color=\"info\">\r\n                                <i className=\"fa fa-bars\" />\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </CardHeader>\r\n                <Collapse isOpen={this.props.isOpen.second}>\r\n                    <CardBody>\r\n                        <Table responsive bordered id=\"branch-categorization-summary\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th data-f-bold rowSpan=\"2\">S.N.</th>\r\n                                    <th data-f-bold rowSpan=\"2\">Branch Name</th>\r\n                                    <th data-f-bold rowSpan=\"2\">Estimated</th>\r\n                                    <th data-f-bold colSpan=\"2\" className=\"text-center\">Actual</th>\r\n                                </tr>\r\n                                <tr>\r\n                                    <th data-f-bold>Previous Quarter</th>\r\n                                    <th data-f-bold>This Quarter</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {this.props.actual.map((branch, index) => {\r\n                                    const estimated = this.props.estimated[index];\r\n                                    const previous = this.props.previous[index];\r\n                                    return (\r\n                                        <tr key={branch.id}>\r\n                                            <td>{index + 1}</td>\r\n                                            <td>{branch.name}</td>\r\n                                            <td>\r\n                                                {estimated ? (estimated.screening ? estimated.screening.name : \"\") : \"\"}\r\n                                            </td>\r\n                                            <td>\r\n                                                {previous ? (previous.screening ? previous.screening.name : \"\") : \"\"}\r\n                                            </td>\r\n                                            <td>\r\n                                                {branch.screening ? branch.screening.name : \"\"}\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                            </tbody>\r\n                        </Table>\r\n                    </CardBody>\r\n                </Collapse>\r\n                <CardFooter>\r\n                    <Button className=\"mx-2\" color=\"info\" onClick={this.downloadReport}>\r\n                        <i className=\"fa fa-download text-white\" />\r\n                    </Button>\r\n                </CardFooter>\r\n            </Card>\r\n        );\r\n    }\r\n\r\n}","import React from 'react';\r\nimport {\r\n    Table,\r\n    Row, Col,\r\n    Button,\r\n    Card, Collapse,\r\n    CardHeader, CardBody, CardFooter,\r\n} from 'reactstrap';\r\nimport TableToExcel from \"@linways/table-to-excel\";\r\nimport { saveGrading } from './api';\r\n\r\nexport default class BranchGrading extends React.Component {\r\n\r\n    getGrade = (actual, other) => {\r\n        // If ACTUAL Has lower lowerLimit then the bank is UPGRADED\r\n        if (actual && other) {\r\n            if (actual.lowerLimit < other.lowerLimit) {\r\n                return <span>Upgraded <i className=\"fa fa-lg fa-caret-up text-success\" /></span>;\r\n            } else if (actual.lowerLimit > other.lowerLimit) {\r\n                return <span>Downgraded <i className=\"fa fa-lg fa-caret-down text-danger\" /></span>;\r\n            } else {\r\n                return 'Status Quo';\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    getGradeString = (actual, other) => {\r\n        // If ACTUAL Has lower lowerLimit then the bank is UPGRADED\r\n        if (actual && other) {\r\n            if (actual.lowerLimit < other.lowerLimit) {\r\n                return \"Upgraded\";\r\n            } else if (actual.lowerLimit > other.lowerLimit) {\r\n                return \"Downgraded\";\r\n            } else {\r\n                return 'Status Quo';\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    downloadReport = () => {\r\n        TableToExcel.convert(document.getElementById(\"table-grading\"), {\r\n            name: 'branch-grading.xlsx'\r\n        });\r\n    }\r\n\r\n    saveReport = () => {\r\n        const data = this.props.actual.map((branch, index) => {\r\n            const estimated = this.props.estimated[index];\r\n            const previous = this.props.previous[index];\r\n            return {\r\n                branchId: branch.id,\r\n                estimatedVsActual: estimated ? this.getGradeString(branch.screening, estimated.screening) : \"\",\r\n                previousVsActual: previous ? this.getGradeString(branch.screening, previous.screening) : \"\",\r\n            }\r\n        });\r\n        saveGrading(data, {\r\n            startDate: this.props.startDate,\r\n            type: 'branch'\r\n        }).then(data => {\r\n            window.alert(data)\r\n        }).catch(() => {\r\n            window.alert(\"Oops! Error occurred\")\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const p = this.props.permissions;\r\n        return (\r\n            <Card>\r\n                <CardHeader>\r\n                    <Row>\r\n                        <Col>\r\n                            Branch Grading\r\n                            </Col>\r\n                        <Col>\r\n                            <Button\r\n                                onClick={() => this.props.toggleCollapse('third')}\r\n                                className=\"float-right text-white\"\r\n                                size=\"sm\" color=\"info\">\r\n                                <i className=\"fa fa-bars\" />\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </CardHeader>\r\n                <Collapse isOpen={this.props.isOpen.third}>\r\n                    <CardBody>\r\n                        <Table responsive bordered id=\"table-grading\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th data-f-bold>S.N.</th>\r\n                                    <th data-f-bold>Branch Name</th>\r\n                                    <th data-f-bold>Actual This Qtr. V/s Estimated</th>\r\n                                    <th data-f-bold>Actual This Qtr. V/s Previous Quarter</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {this.props.actual.map((branch, index) => {\r\n                                    const estimated = this.props.estimated[index];\r\n                                    const previous = this.props.previous[index];\r\n                                    return (\r\n                                        <tr key={branch.id}>\r\n                                            <td>{index + 1}</td>\r\n                                            <td>{branch.name}</td>\r\n                                            <td>\r\n                                                {estimated ? this.getGrade(branch.screening, estimated.screening) : \"\"}\r\n                                            </td>\r\n                                            <td>\r\n                                                {previous ? this.getGrade(branch.screening, previous.screening) : \"\"}\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                            </tbody>\r\n                        </Table>\r\n                    </CardBody>\r\n                </Collapse>\r\n                <CardFooter>\r\n                    <Button className=\"mx-2\" color=\"info\" onClick={this.downloadReport}>\r\n                        <i className=\"fa fa-download text-white\" />\r\n                    </Button>\r\n                    {p.isApprover ?\r\n                        <Button className=\"mx-2\" color=\"success\" onClick={this.saveReport}>\r\n                            <i className=\"fa fa-save text-white\" />\r\n                        </Button>\r\n                        : null}\r\n                </CardFooter>\r\n            </Card>\r\n        )\r\n    }\r\n\r\n}","import React from 'react';\r\nimport BranchCategorization from './BranchCategorization';\r\nimport { branchCategorization, } from './api';\r\nimport {\r\n    Input, InputGroup, InputGroupAddon,\r\n    Col, Row,\r\n    Label,\r\n    Card, CardBody,\r\n} from 'reactstrap';\r\nimport {\r\n    getStartQuarter,\r\n    getBSDate,\r\n    getQuarterByAD,\r\n    QUARTER_ONE,\r\n    QUARTER_TWO,\r\n    QUARTER_THREE,\r\n    QUARTER_FOUR,\r\n    getFormattedDate,\r\n} from './util/getDates';\r\nimport BranchCategorizationSummary from './BranchCategorizationSummary';\r\nimport BranchGrading from './BranchGrading';\r\nimport { bs2ad } from 'ad-bs-converter';\r\n\r\nexport default class BranchDetails extends React.Component {\r\n\r\n    state = {\r\n        activeTab: {\r\n            first: '1',\r\n            second: '1',\r\n            third: '3',\r\n        },\r\n        isOpen: {\r\n            first: false,\r\n            second: false,\r\n            third: false,\r\n        },\r\n        actual: [],\r\n        previous: [],\r\n        estimated: [],\r\n        startDate: getStartQuarter(),\r\n    }\r\n\r\n    handleDateChange = e => {\r\n        const value = e.target.value;\r\n        let bsDate = null;\r\n        switch (e.target.name) {\r\n            case \"quarter\":\r\n                const year = getBSDate(this.state.startDate).year;\r\n                bsDate = year + value;\r\n                break;\r\n            case \"year\":\r\n                if (value.length === 4) {\r\n                    const quarter = getQuarterByAD(this.state.startDate);\r\n                    bsDate = value + quarter;\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (value) {\r\n            const adDate = bsDate ? getFormattedDate(bs2ad(bsDate)) : this.state.startDate;\r\n            this.setState({\r\n                startDate: adDate\r\n            }, () => this.updateData());\r\n        }\r\n    }\r\n\r\n    toggleTab = (tab, position) => {\r\n        if (this.state.activeTab[position] !== tab) {\r\n            const activeTab = this.state.activeTab;\r\n            activeTab[position] = tab;\r\n            this.setState({ activeTab });\r\n        }\r\n    }\r\n\r\n    toggleCollapse = (position) => {\r\n        const isOpen = this.state.isOpen;\r\n        isOpen[position] = !isOpen[position];\r\n        this.setState({ isOpen });\r\n    }\r\n\r\n    updateData() {\r\n        branchCategorization({\r\n            startDate: this.state.startDate\r\n        }).then(data => {\r\n            this.setState(data);\r\n        }).catch(() => { });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateData();\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state.actual);\r\n\r\n        return (\r\n            <div className=\"animate fadeIn\">\r\n                <Card>\r\n                    <CardBody>\r\n                        <Row>\r\n                            <Col md={4}>\r\n                                <Label>Quarter Start Date (YYYY/MM/DD)</Label>\r\n                                <InputGroup className=\"mb-2\">\r\n                                    <InputGroupAddon addonType=\"prepend\">\r\n                                        <Input\r\n                                            onChange={this.handleDateChange}\r\n                                            value={getQuarterByAD(this.state.startDate)}\r\n                                            type=\"select\"\r\n                                            name=\"quarter\"\r\n                                            className=\"font-italic\">\r\n                                            <option value=''>Select Quarter</option>\r\n                                            <option value={QUARTER_ONE}>First Quarter</option>\r\n                                            <option value={QUARTER_TWO}>Second Quarter</option>\r\n                                            <option value={QUARTER_THREE}>Third Quarter</option>\r\n                                            <option value={QUARTER_FOUR}>Fourth Quarter</option>\r\n                                        </Input>\r\n                                    </InputGroupAddon>\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        maxLength=\"4\"\r\n                                        minLength=\"4\"\r\n                                        className=\"font-italic\"\r\n                                        placeholder=\"Year\"\r\n                                        name=\"year\"\r\n                                        onChange={this.handleDateChange}\r\n                                        value={getBSDate(this.state.startDate).year}\r\n                                    />\r\n                                </InputGroup>\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                </Card>\r\n                <BranchCategorization\r\n                    activeTab={this.state.activeTab}\r\n                    isOpen={this.state.isOpen}\r\n                    toggleTab={this.toggleTab}\r\n                    toggleCollapse={this.toggleCollapse}\r\n                    {...this.state}\r\n                    {...this.props}\r\n                />\r\n                <BranchCategorizationSummary\r\n                    activeTab={this.state.activeTab}\r\n                    isOpen={this.state.isOpen}\r\n                    toggleTab={this.toggleTab}\r\n                    toggleCollapse={this.toggleCollapse}\r\n                    {...this.state}\r\n                    {...this.props}\r\n                />\r\n                <BranchGrading\r\n                    activeTab={this.state.activeTab}\r\n                    isOpen={this.state.isOpen}\r\n                    toggleTab={this.toggleTab}\r\n                    toggleCollapse={this.toggleCollapse}\r\n                    startDate={this.state.startDate}\r\n                    {...this.state}\r\n                    {...this.props}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}"],"sourceRoot":""}
{"version":3,"sources":["views/Reports/api.js","views/Reports/api/branch_summary.js","views/Reports/api/risk_trigger.js","views/Reports/api/branch_categorization.js","views/Reports/api/ho_summary.js","../../../js/custom-tooltips.js","../../../js/index.js","views/Reports/RegisterReports.js"],"names":["url","urlData","log","require","branchSummary","downloadBranchSummary","saveBranchSummary","getRiskTriggers","getRiskTriggerData","branchCategorization","downloadBranchCategorization","saveBranchCategorization","hoSummary","getReportOutputs","options","a","async","server","get","params","json","data","getAllRiskRegister","getAuditLog","callback","then","catch","err","console","error","saveGrading","post","JSON","stringify","riskTrigger","riskTriggerData","ClassName","Selector","DIV","SPAN","TOOLTIP","this","_chart","canvas","id","_idMaker","Math","_canvasId","_setCanvasId","tooltip","document","tooltipModel","titleLines","tooltipHeader","tooltipHeaderTitle","tooltipBody","item","tooltipBodyItems","tooltipBodyItem","colors","tooltipBodyItemColor","tooltipBodyItemLabel","tooltipBodyItemValue","position","positionY","positionLeft","positionTop","halfWidth","customTooltips","RegisterReports","state","_","orderBy","setState","label","forEach","element","push","tableName","hexArr","i","length","random","toString","count","line","labels","datasets","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","bar","borderWidth","hoverBackgroundColor","hoverBorderColor","doughnut","radar","pie","polar","tooltips","enabled","custom","CustomTooltips","maintainAspectRatio","className","Component"],"mappings":"8jBACMA,EAAM,UACNC,EAAU,qBACVC,EAAM,a,EAKRC,EAAQ,KAHVC,E,EAAAA,cACAC,E,EAAAA,sBACAC,E,EAAAA,kB,EAE8CH,EAAQ,KAAhDI,E,EAAAA,gBAAiBC,E,EAAAA,mB,EAKrBL,EAAQ,KAHVM,E,EAAAA,qBACAC,E,EAAAA,6BACAC,E,EAAAA,yBAEMC,EAAcT,EAAQ,KAAtBS,UAER,SAAeC,EAAiBC,GAAhC,eAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACqBE,SAAOC,IAAP,UAAclB,EAAd,mBAAoC,CACrDmB,OAAQL,KAFZ,cACQM,EADR,yBAISA,EAAKC,MAJd,qCAOA,SAAeC,EAAmBR,GAAlC,eAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACqBE,SAAOC,IAAP,UAAcjB,GAAW,CAAEkB,OAAQL,KADxD,cACQM,EADR,yBAESA,EAAKC,MAFd,qCAKA,SAASE,EAAYC,GACnBP,SACGC,IADH,UACUhB,IACPuB,MAAK,SAASL,GAEb,OAAOI,EAAS,KAAMJ,EAAKC,SAE5BK,OAAM,SAASC,GACdC,QAAQC,MAAM,iDAIpB,SAAeC,EAAYT,EAAMP,GAAjC,eAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACqBE,SAAOc,KAAP,UAAe/B,EAAf,2BACdc,EADc,CAEjBO,KAAMA,MAHV,cACQD,EADR,yBAKSA,EAAKC,MALd,uC,4NCxCMrB,EAAM,UAYZ,SAAeI,EAAcU,GAA7B,eAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACuBE,SAAOC,IAAP,UACZlB,EADY,mBAEf,CACImB,OAAQL,KAJpB,cACUM,EADV,yBAOWA,EAAKC,MAPhB,qCAUA,SAAehB,EAAsBgB,GAArC,eAAAN,EAAAC,OAAA,kEAAAD,EAAA,MACuBE,SAAOc,KAAP,UACZ/B,EADY,4BAEfgC,KAAKC,UAAUZ,KAHvB,cACUD,EADV,yBAKWA,EAAKC,MALhB,qCAQA,SAAef,EAAkBe,GAAjC,eAAAN,EAAAC,OAAA,kEAAAD,EAAA,MACuBE,SAAOc,KAAP,UACZ/B,EADY,wBAEfgC,KAAKC,UAAUZ,KAHvB,cACUD,EADV,yBAKWA,EAAKC,MALhB,uC,yKC9BMa,EAAc,sBACdC,EAAkB,2BAExB,SAAe3B,EAAmBM,GAAlC,SAAAC,EAAAC,OAAA,yEACWC,SAAOC,IAAP,UAAciB,GAAmB,CAAEhB,OAAQL,KADtD,qCAIA,SAASP,EAAgBiB,GACrBP,SACKC,IADL,UACYgB,IACPT,MAAK,SAAUL,GACZI,EAAS,KAAMJ,EAAKC,SAEvBK,OAAM,SAAUC,GACbH,EAASG,Q,iPCdf3B,EAAM,UASZ,SAAeS,EAAqBK,GAApC,eAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACuBE,SAAOC,IAAP,UACZlB,EADY,0BAEf,CACImB,OAAQL,KAJpB,cACUM,EADV,yBAOWA,EAAKC,MAPhB,qCAUA,SAAeX,EAA6BW,GAA5C,eAAAN,EAAAC,OAAA,kEAAAD,EAAA,MACuBE,SAAOc,KAAP,UACZ/B,EADY,mCAEfgC,KAAKC,UAAUZ,KAHvB,cACUD,EADV,yBAKWA,EAAKC,MALhB,qCAQA,SAAeV,EAAyBU,GAAxC,eAAAN,EAAAC,OAAA,kEAAAD,EAAA,MACuBE,SAAOc,KAAP,UACZ/B,EADY,+BAEfgC,KAAKC,UAAUZ,KAHvB,cACUD,EADV,yBAKWA,EAAKC,MALhB,uC,gHC3BMrB,EAAM,UAUZ,SAAeY,EAAUE,GAAzB,eAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACuBE,SAAOC,IAAP,UACZlB,EADY,eAEf,CACImB,OAAQL,KAJpB,cACUM,EADV,yBAOWA,EAAKC,MAPhB,uC,8CCJA,cAAsC,WAa9Be,EAAY,QAAZA,EAAY,QAAZA,EAAY,kBAAZA,EAAY,eAAZA,EAAY,eAAZA,EAAY,oBAAZA,EAAY,0BAAZA,EAAY,0BAAZA,EAAY,0BAAZA,EAAY,iBAAZA,EAWsB,sBAGtBC,EAAW,CACfC,IADe,MAEfC,KAFe,OAGfC,SAAaC,KAAKC,OAAOC,OAAOC,IA5Bb,WACnB,IAAMC,EAAW,WAGf,OADA,OACS,EAAIC,KAAL,UAAD,YAFP,KAIIC,EAAY,YAAWF,IAAaA,KAE1C,OADA,qBACA,EAoBsCG,IAA/B,YAGLC,EAAUC,wBAAwBb,EAAtC,SAUA,GARA,KACEY,EAAUC,uBAAVD,QACAA,GAAaZ,EAAbY,QACAA,YAAoBb,EACpBK,KAAA,yCAIF,IAAIU,UAAJ,CAcA,GARAF,mBAAyBb,EAAiBA,EAAiBA,GACvDe,EAAJ,OACEF,gBAAsBE,EAAtBF,QAEAA,gBAAsBb,GAIpBe,EAAJ,KAAuB,CACrB,IAAMC,EAAaD,SAAnB,GAEME,EAAgBH,uBAAuBb,EAA7C,KACAgB,YAA0BjB,EAE1BgB,WAAmB,YACjB,IAAME,EAAqBJ,uBAAuBb,EAAlD,KACAiB,YAA+BlB,EAC/BkB,cACAD,oBAGF,IAAME,EAAcL,uBAAuBb,EAA3C,KACAkB,YAAwBnB,EAECe,EAAA,UAAsB,mBAAUK,EAAV,SAC/CC,SAAyB,cACvB,IAAMC,EAAkBR,uBAAuBb,EAA/C,KACAqB,YAA4BtB,EAE5B,IAAMuB,EAASR,cAAf,GAEMS,EAAuBV,uBAAuBb,EAApD,MAMA,GALAuB,YAAiCxB,EACjCwB,wBAA6CD,EAA7CC,gBAEAF,iBAEIF,uBAAJ,EAAmC,CACjC,IAAMK,EAAuBX,uBAAuBb,EAApD,MACAwB,YAAiCzB,EACjCyB,YAAiCL,iBAAjCK,GAEAH,iBAEA,IAAMI,EAAuBZ,uBAAuBb,EAApD,MACAyB,YAAiC1B,EACjC0B,YAAiCN,iBAAjCM,MAEAJ,qBACK,CACL,IAAMI,EAAuBZ,uBAAuBb,EAApD,MACAyB,YAAiC1B,EACjC0B,YAAiCN,EAAjCM,GAEAJ,iBAGFH,oBAGFN,eAEAA,iBACAA,iBAGF,IAAMc,EAAWtB,KAAKC,OAAOC,OAA7B,wBAEMqB,EAAYvB,KAAKC,OAAOC,OAA9B,UAGIsB,EAFcxB,KAAKC,OAAOC,OAA9B,WAE+BQ,EAA/B,OACMe,EAAcF,EAAYb,EAzHI,OA2H9BgB,EAAYhB,QAAlB,EAEIc,IAA2BF,EAA/B,MACEE,KACSA,EAAJ,IACLA,MAIFhB,kBACAA,aAAwBgB,EAAxBhB,KACAA,YAAuBiB,EAAvBjB,UA1FEA,kB,IClDEmB,EAAN,E,wQCOMC,E,2MACJC,MAAQ,CACNpE,IAAK,I,mFAGc,IAAD,OAClBqB,aAAY,SAACI,EAAKN,GAChB,IAAIM,EAAJ,CACA,IAAMzB,EAAMqE,IAAEC,QAAQnD,EAAM,CAAC,aAAc,CAAC,QAC5C,EAAKoD,SAAS,CAAEvE,c,+BAGV,IACAA,EAAQuC,KAAK6B,MAAbpE,IACFwE,EAAQ,GACdxE,EAAIyE,SAAQ,SAAAC,GAAO,OAAIF,EAAMG,KAAKD,EAAQE,cAE1C,IADA,IAAMC,EAAS,GACNC,EAAI,EAAGA,GAAKN,EAAMO,OAAS,EAAGD,IACrCD,EAAOF,KAAK,KAAwB,SAAhB/B,KAAKoC,UAAwB,GAAGC,SAAS,KAE/D,IAAM9D,EAAO,GACbnB,EAAIyE,SAAQ,SAAAC,GAAO,OAAIvD,EAAKwD,KAAKD,EAAQQ,UAEzC,IAAMC,EAAO,CACXC,OAAQZ,EACRa,SAAU,CACR,CACEb,MAAOA,EACPc,MAAM,EACNC,YAAa,GACbC,gBAAiB,uBACjBC,YAAa,qBACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,qBAClBC,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,qBAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChBnF,KAAMA,KAKNoF,EAAM,CACVnB,OAAQZ,EACRa,SAAU,CACR,CACEb,MAAOA,EACPgB,gBAAiB,uBACjBC,YAAa,qBACbe,YAAa,EACbC,qBAAsB,uBACtBC,iBAAkB,qBAClBvF,KAAMA,KAKNwF,EAAW,CACfvB,OAAQZ,EACRa,SAAU,CACR,CACElE,KAAMA,EACNqE,gBAAiBX,EACjB4B,qBAAsB5B,KAKtB+B,EAAQ,CACZxB,OAAOZ,EACPa,SAAU,CACR,CACEb,MAAOA,EACPgB,gBAAiB,wBACjBC,YAAa,sBACbM,qBAAsB,sBACtBD,iBAAkB,OAClBI,0BAA2B,OAC3BC,sBAAuB,sBACvBhF,KAAKA,GAEP,CACEqD,MAAOA,EACPgB,gBAAiB,uBACjBC,YAAa,qBACbM,qBAAsB,qBACtBD,iBAAkB,OAClBI,0BAA2B,OAC3BC,sBAAuB,qBACvBhF,KAAMA,KAKN0F,EAAM,CACVzB,OAAQZ,EACRa,SAAU,CACR,CACElE,KAAMA,EACNqE,gBAAiBX,EACjB4B,qBAAsB5B,KAKtBiC,EAAQ,CACZzB,SAAU,CACR,CACElE,KAAMA,EACNqE,gBAAiBX,EACjBL,MAAOA,IAGXY,OAAQZ,GAGJ5D,EAAU,CACdmG,SAAU,CACRC,SAAS,EACTC,OAAQC,kBAEVC,qBAAqB,GAGvB,OACE,yBAAKC,UAAU,mBAEX,6BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,mBAIA,kBAAC,IAAD,KACE,yBAAKA,UAAU,iBACb,kBAAC,IAAD,CAAMjG,KAAMgE,EAAMvE,QAASA,QAKjC,kBAAC,IAAD,KACE,kBAAC,IAAD,kBAIA,kBAAC,IAAD,KACE,yBAAKwG,UAAU,iBACb,kBAAC,IAAD,CAAKjG,KAAMoF,EAAK3F,QAASA,OAI/B,kBAAC,IAAD,KACE,kBAAC,IAAD,uBAIA,kBAAC,IAAD,KACE,yBAAKwG,UAAU,iBACb,kBAAC,IAAD,CAAUjG,KAAMwF,OAItB,kBAAC,IAAD,KACE,kBAAC,IAAD,oBAIA,kBAAC,IAAD,KACE,yBAAKS,UAAU,iBACb,kBAAC,IAAD,CAAOjG,KAAMyF,OAInB,kBAAC,IAAD,KACE,kBAAC,IAAD,kBAIA,kBAAC,IAAD,KACE,yBAAKQ,UAAU,iBACb,kBAAC,IAAD,CAAKjG,KAAM0F,OAIjB,kBAAC,IAAD,KACE,kBAAC,IAAD,yBAIA,kBAAC,IAAD,KACE,yBAAKO,UAAU,iBACb,kBAAC,IAAD,CAAOjG,KAAM2F,EAAOlG,QAASA,Y,GAvMfyG,aAiNflD","file":"static/js/29.1790ef5d.chunk.js","sourcesContent":["import { server } from \"../../config/server\";\r\nconst url = \"/report\";\r\nconst urlData = \"/risk-register-all\";\r\nconst log = \"/audit-log\";\r\nconst {\r\n  branchSummary,\r\n  downloadBranchSummary,\r\n  saveBranchSummary\r\n} = require(\"./api/branch_summary\");\r\nconst { getRiskTriggers, getRiskTriggerData } = require(\"./api/risk_trigger\");\r\nconst {\r\n  branchCategorization,\r\n  downloadBranchCategorization,\r\n  saveBranchCategorization\r\n} = require(\"./api/branch_categorization\");\r\nconst { hoSummary } = require(\"./api/ho_summary\");\r\n\r\nasync function getReportOutputs(options) {\r\n  const json = await server.get(`${url}/report-outputs`, {\r\n    params: options\r\n  });\r\n  return json.data;\r\n}\r\n\r\nasync function getAllRiskRegister(options) {\r\n  const json = await server.get(`${urlData}`, { params: options });\r\n  return json.data;\r\n}\r\n\r\nfunction getAuditLog(callback) {\r\n  server\r\n    .get(`${log}`)\r\n    .then(function(json) {\r\n      // console.log(json.data);\r\n      return callback(null, json.data);\r\n    })\r\n    .catch(function(err) {\r\n      console.error(\"Error getting data from all risk Register!\");\r\n    });\r\n}\r\n\r\nasync function saveGrading(data, options) {\r\n  const json = await server.post(`${url}/grading`, {\r\n    ...options,\r\n    data: data\r\n  });\r\n  return json.data;\r\n}\r\n\r\nexport {\r\n  getAllRiskRegister,\r\n  getAuditLog,\r\n  getReportOutputs,\r\n  // BRANCH SUMMARY\r\n  branchSummary,\r\n  downloadBranchSummary,\r\n  saveBranchSummary,\r\n  // BRANCH CATEGORIZATION\r\n  branchCategorization,\r\n  downloadBranchCategorization,\r\n  saveBranchCategorization,\r\n  // HO Summary\r\n  hoSummary,\r\n  //saving report\r\n  saveGrading,\r\n  //Risk Trigger\r\n  getRiskTriggers,\r\n  getRiskTriggerData\r\n};\r\n","import { server } from \"../../../config/server\";\r\nconst url = \"/report\";\r\n\r\n/**\r\n * \r\n * @param {Object} options\r\n * @param {Number} options.branchId   - Branch ID whose report is to be calculated\r\n * @param {Number} options.frequency  - QUARTERLY, HALF_YEARLY, YEARLY (in months)\r\n * @param {String} options.status     - DRAFT, PENDING, UNAPPROVED, APPROVED (Risk Register status)\r\n * @param {String} options.mergeType  - avg, min, max (Merge Function Types)\r\n * @param {Date}   options.startDate    - Base date to calculate the report Data\r\n * \r\n */\r\nasync function branchSummary(options) {\r\n    const json = await server.get(\r\n        `${url}/branch-summary`,\r\n        {\r\n            params: options\r\n        }\r\n    );\r\n    return json.data;\r\n}\r\n\r\nasync function downloadBranchSummary(data) {\r\n    const json = await server.post(\r\n        `${url}/branch-summary/download`,\r\n        JSON.stringify(data)\r\n    );\r\n    return json.data;\r\n}\r\n\r\nasync function saveBranchSummary(data) {\r\n    const json = await server.post(\r\n        `${url}/branch-summary/save`,\r\n        JSON.stringify(data)\r\n    );\r\n    return json.data;\r\n}\r\n\r\nexport {\r\n    branchSummary,\r\n    downloadBranchSummary,\r\n    saveBranchSummary\r\n}\r\n","import { server } from \"../../../config/server\";\r\nconst riskTrigger = \"report/risk-trigger\";\r\nconst riskTriggerData = \"report/risk-trigger/data\";\r\n\r\nasync function getRiskTriggerData(options) {\r\n    return server.get(`${riskTriggerData}`, { params: options });\r\n}\r\n\r\nfunction getRiskTriggers(callback) {\r\n    server\r\n        .get(`${riskTrigger}`)\r\n        .then(function (json) {\r\n            callback(null, json.data);\r\n        })\r\n        .catch(function (err) {\r\n            callback(err);\r\n        });\r\n}\r\n\r\nexport {\r\n    getRiskTriggers,\r\n    getRiskTriggerData,\r\n}","import { server } from \"../../../config/server\";\r\nconst url = \"/report\";\r\n\r\n/**\r\n * \r\n * @param {Object} options\r\n * @param {Number} options.branchId   - Branch ID whose report is to be calculated\r\n * @param {Date}   options.thisQuarter    - Base date to calculate the report Data\r\n * \r\n */\r\nasync function branchCategorization(options) {\r\n    const json = await server.get(\r\n        `${url}/branch-categorization`,\r\n        {\r\n            params: options\r\n        }\r\n    );\r\n    return json.data;\r\n}\r\n\r\nasync function downloadBranchCategorization(data) {\r\n    const json = await server.post(\r\n        `${url}/branch-categorization/download`,\r\n        JSON.stringify(data)\r\n    );\r\n    return json.data;\r\n}\r\n\r\nasync function saveBranchCategorization(data) {\r\n    const json = await server.post(\r\n        `${url}/branch-categorization/save`,\r\n        JSON.stringify(data)\r\n    );\r\n    return json.data;\r\n}\r\n\r\nexport {\r\n    branchCategorization,\r\n    downloadBranchCategorization,\r\n    saveBranchCategorization,\r\n}","import { server } from \"../../../config/server\";\r\nconst url = \"/report\";\r\n\r\n/**\r\n * \r\n * @param {Object} options\r\n * @param {Number} options.frequency  - QUARTERLY, HALF_YEARLY, YEARLY (in months)\r\n * @param {String} options.status     - DRAFT, PENDING, UNAPPROVED, APPROVED (Risk Register status)\r\n * @param {Date}   options.startDate  - Base date to calculate the report Data\r\n * \r\n */\r\nasync function hoSummary(options) {\r\n    const json = await server.get(\r\n        `${url}/ho-summary`,\r\n        {\r\n            params: options\r\n        }\r\n    );\r\n    return json.data;\r\n}\r\n\r\nexport {\r\n    hoSummary\r\n}","/**\n * --------------------------------------------------------------------------\n * CoreUI Plugins - Custom Tooltips for Chart.js (v1.3.1): custom-tooltips.js\n * Licensed under MIT (https://coreui.io/license)\n * --------------------------------------------------------------------------\n */\n\nfunction CustomTooltips(tooltipModel) {\n  // Add unique id if not exist\n  const _setCanvasId = () => {\n    const _idMaker = () => {\n      const _hex = 16\n      const _multiplier = 0x10000\n      return ((1 + Math.random()) * _multiplier | 0).toString(_hex)\n    }\n    const _canvasId = `_canvas-${_idMaker() + _idMaker()}`\n    this._chart.canvas.id = _canvasId\n    return _canvasId\n  }\n\n  const ClassName = {\n    ABOVE                   : 'above',\n    BELOW                   : 'below',\n    CHARTJS_TOOLTIP         : 'chartjs-tooltip',\n    NO_TRANSFORM            : 'no-transform',\n    TOOLTIP_BODY            : 'tooltip-body',\n    TOOLTIP_BODY_ITEM       : 'tooltip-body-item',\n    TOOLTIP_BODY_ITEM_COLOR : 'tooltip-body-item-color',\n    TOOLTIP_BODY_ITEM_LABEL : 'tooltip-body-item-label',\n    TOOLTIP_BODY_ITEM_VALUE : 'tooltip-body-item-value',\n    TOOLTIP_HEADER          : 'tooltip-header',\n    TOOLTIP_HEADER_ITEM     : 'tooltip-header-item'\n  }\n\n  const Selector = {\n    DIV     : 'div',\n    SPAN    : 'span',\n    TOOLTIP : `${this._chart.canvas.id || _setCanvasId()}-tooltip`\n  }\n\n  let tooltip = document.getElementById(Selector.TOOLTIP)\n\n  if (!tooltip) {\n    tooltip = document.createElement('div')\n    tooltip.id = Selector.TOOLTIP\n    tooltip.className = ClassName.CHARTJS_TOOLTIP\n    this._chart.canvas.parentNode.appendChild(tooltip)\n  }\n\n  // Hide if no tooltip\n  if (tooltipModel.opacity === 0) {\n    tooltip.style.opacity = 0\n    return\n  }\n\n  // Set caret Position\n  tooltip.classList.remove(ClassName.ABOVE, ClassName.BELOW, ClassName.NO_TRANSFORM)\n  if (tooltipModel.yAlign) {\n    tooltip.classList.add(tooltipModel.yAlign)\n  } else {\n    tooltip.classList.add(ClassName.NO_TRANSFORM)\n  }\n\n  // Set Text\n  if (tooltipModel.body) {\n    const titleLines = tooltipModel.title || []\n\n    const tooltipHeader = document.createElement(Selector.DIV)\n    tooltipHeader.className = ClassName.TOOLTIP_HEADER\n\n    titleLines.forEach((title) => {\n      const tooltipHeaderTitle = document.createElement(Selector.DIV)\n      tooltipHeaderTitle.className = ClassName.TOOLTIP_HEADER_ITEM\n      tooltipHeaderTitle.innerHTML = title\n      tooltipHeader.appendChild(tooltipHeaderTitle)\n    })\n\n    const tooltipBody = document.createElement(Selector.DIV)\n    tooltipBody.className = ClassName.TOOLTIP_BODY\n\n    const tooltipBodyItems = tooltipModel.body.map((item) => item.lines)\n    tooltipBodyItems.forEach((item, i) => {\n      const tooltipBodyItem = document.createElement(Selector.DIV)\n      tooltipBodyItem.className = ClassName.TOOLTIP_BODY_ITEM\n\n      const colors = tooltipModel.labelColors[i]\n\n      const tooltipBodyItemColor = document.createElement(Selector.SPAN)\n      tooltipBodyItemColor.className = ClassName.TOOLTIP_BODY_ITEM_COLOR\n      tooltipBodyItemColor.style.backgroundColor = colors.backgroundColor\n\n      tooltipBodyItem.appendChild(tooltipBodyItemColor)\n\n      if (item[0].split(':').length > 1) {\n        const tooltipBodyItemLabel = document.createElement(Selector.SPAN)\n        tooltipBodyItemLabel.className = ClassName.TOOLTIP_BODY_ITEM_LABEL\n        tooltipBodyItemLabel.innerHTML = item[0].split(': ')[0]\n\n        tooltipBodyItem.appendChild(tooltipBodyItemLabel)\n\n        const tooltipBodyItemValue = document.createElement(Selector.SPAN)\n        tooltipBodyItemValue.className = ClassName.TOOLTIP_BODY_ITEM_VALUE\n        tooltipBodyItemValue.innerHTML = item[0].split(': ').pop()\n\n        tooltipBodyItem.appendChild(tooltipBodyItemValue)\n      } else {\n        const tooltipBodyItemValue = document.createElement(Selector.SPAN)\n        tooltipBodyItemValue.className = ClassName.TOOLTIP_BODY_ITEM_VALUE\n        tooltipBodyItemValue.innerHTML = item[0]\n\n        tooltipBodyItem.appendChild(tooltipBodyItemValue)\n      }\n\n      tooltipBody.appendChild(tooltipBodyItem)\n    })\n\n    tooltip.innerHTML = ''\n\n    tooltip.appendChild(tooltipHeader)\n    tooltip.appendChild(tooltipBody)\n  }\n\n  const position = this._chart.canvas.getBoundingClientRect()\n\n  const positionY = this._chart.canvas.offsetTop\n  const positionX = this._chart.canvas.offsetLeft\n\n  let positionLeft = positionX + tooltipModel.caretX\n  const positionTop = positionY + tooltipModel.caretY\n  // eslint-disable-next-line\n  const halfWidth = tooltipModel.width / 2\n\n  if (positionLeft + halfWidth > position.width) {\n    positionLeft -= halfWidth\n  } else if (positionLeft < halfWidth) {\n    positionLeft += halfWidth\n  }\n\n  // Display, position, and set styles for font\n  tooltip.style.opacity = 1\n  tooltip.style.left = `${positionLeft}px`\n  tooltip.style.top = `${positionTop}px`\n}\n\nexport default CustomTooltips\n","import CustomTooltips from './custom-tooltips'\nconst customTooltips = CustomTooltips\n// TODO: camel-case\nexport {\n  CustomTooltips,\n  customTooltips\n}\n","import React, { Component } from \"react\";\r\nimport { Bar, Doughnut, Line, Pie, Polar, Radar } from \"react-chartjs-2\";\r\nimport { Card, CardBody, CardHeader } from \"reactstrap\";\r\nimport { CustomTooltips } from \"@coreui/coreui-plugin-chartjs-custom-tooltips\";\r\nimport { getAuditLog } from \"./api\";\r\nimport _ from \"lodash\";\r\n\r\n\r\nclass RegisterReports extends Component {\r\n  state = {\r\n    log: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    getAuditLog((err, data) => {\r\n      if (err) return;\r\n      const log = _.orderBy(data, [\"tableName\"], [\"asc\"]);\r\n      this.setState({ log });\r\n    });\r\n  }\r\n  render() {\r\n    const { log } = this.state;\r\n    const label = [];\r\n    log.forEach(element => label.push(element.tableName));\r\n    const hexArr = [];\r\n    for (let i = 0; i <= label.length - 1; i++) {\r\n      hexArr.push(\"#\" + ((Math.random() * 0xffffff) << 0).toString(16));\r\n    }\r\n    const data = [];\r\n    log.forEach(element => data.push(element.count));\r\n    \r\n    const line = {\r\n      labels: label,\r\n      datasets: [\r\n        {\r\n          label: label,\r\n          fill: false,\r\n          lineTension: 0.1,\r\n          backgroundColor: \"rgba(75,192,192,0.4)\",\r\n          borderColor: \"rgba(75,192,192,1)\",\r\n          borderCapStyle: \"butt\",\r\n          borderDash: [],\r\n          borderDashOffset: 0.0,\r\n          borderJoinStyle: \"miter\",\r\n          pointBorderColor: \"rgba(75,192,192,1)\",\r\n          pointBackgroundColor: \"#fff\",\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\r\n          pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n          pointHoverBorderWidth: 2,\r\n          pointRadius: 1,\r\n          pointHitRadius: 10,\r\n          data: data\r\n        }\r\n      ]\r\n    };\r\n    \r\n    const bar = {\r\n      labels: label,\r\n      datasets: [\r\n        {\r\n          label: label,\r\n          backgroundColor: \"rgba(255,99,132,0.2)\",\r\n          borderColor: \"rgba(255,99,132,1)\",\r\n          borderWidth: 1,\r\n          hoverBackgroundColor: \"rgba(255,99,132,0.4)\",\r\n          hoverBorderColor: \"rgba(255,99,132,1)\",\r\n          data: data\r\n        }\r\n      ]\r\n    };\r\n    \r\n    const doughnut = {\r\n      labels: label,\r\n      datasets: [\r\n        {\r\n          data: data,\r\n          backgroundColor: hexArr,\r\n          hoverBackgroundColor: hexArr\r\n        }\r\n      ]\r\n    };\r\n    \r\n    const radar = {\r\n      labels:label,\r\n      datasets: [\r\n        {\r\n          label: label,\r\n          backgroundColor: \"rgba(179,181,198,0.2)\",\r\n          borderColor: \"rgba(179,181,198,1)\",\r\n          pointBackgroundColor: \"rgba(179,181,198,1)\",\r\n          pointBorderColor: \"#fff\",\r\n          pointHoverBackgroundColor: \"#fff\",\r\n          pointHoverBorderColor: \"rgba(179,181,198,1)\",\r\n          data:data\r\n        },\r\n        {\r\n          label: label,\r\n          backgroundColor: \"rgba(255,99,132,0.2)\",\r\n          borderColor: \"rgba(255,99,132,1)\",\r\n          pointBackgroundColor: \"rgba(255,99,132,1)\",\r\n          pointBorderColor: \"#fff\",\r\n          pointHoverBackgroundColor: \"#fff\",\r\n          pointHoverBorderColor: \"rgba(255,99,132,1)\",\r\n          data: data\r\n        }\r\n      ]\r\n    };\r\n    \r\n    const pie = {\r\n      labels: label,\r\n      datasets: [\r\n        {\r\n          data: data,\r\n          backgroundColor: hexArr,\r\n          hoverBackgroundColor: hexArr\r\n        }\r\n      ]\r\n    };\r\n    \r\n    const polar = {\r\n      datasets: [\r\n        {\r\n          data: data,\r\n          backgroundColor: hexArr,\r\n          label: label // for legend\r\n        }\r\n      ],\r\n      labels: label\r\n    };\r\n    \r\n    const options = {\r\n      tooltips: {\r\n        enabled: false,\r\n        custom: CustomTooltips\r\n      },\r\n      maintainAspectRatio: false\r\n    };\r\n  \r\n    return (\r\n      <div className=\"animated fadeIn\">\r\n        \r\n          <div>\r\n          <Card>\r\n            <CardHeader>\r\n              Line Chart\r\n            \r\n            </CardHeader>\r\n            <CardBody>\r\n              <div className=\"chart-wrapper\">\r\n                <Line data={line} options={options} />\r\n              </div>\r\n            </CardBody>\r\n          </Card>\r\n          </div>\r\n          <Card>\r\n            <CardHeader>\r\n              Bar Chart\r\n         \r\n            </CardHeader>\r\n            <CardBody>\r\n              <div className=\"chart-wrapper\">\r\n                <Bar data={bar} options={options} />\r\n              </div>\r\n            </CardBody>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader>\r\n              Doughnut Chart\r\n         \r\n            </CardHeader>\r\n            <CardBody>\r\n              <div className=\"chart-wrapper\">\r\n                <Doughnut data={doughnut} />\r\n              </div>\r\n            </CardBody>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader>\r\n              Radar Chart\r\n         \r\n            </CardHeader>\r\n            <CardBody>\r\n              <div className=\"chart-wrapper\">\r\n                <Radar data={radar} />\r\n              </div>\r\n            </CardBody>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader>\r\n              Pie Chart\r\n         \r\n            </CardHeader>\r\n            <CardBody>\r\n              <div className=\"chart-wrapper\">\r\n                <Pie data={pie} />\r\n              </div>\r\n            </CardBody>\r\n          </Card>\r\n          <Card>\r\n            <CardHeader>\r\n              Polar Area Chart\r\n         \r\n            </CardHeader>\r\n            <CardBody>\r\n              <div className=\"chart-wrapper\">\r\n                <Polar data={polar} options={options} />\r\n              </div>\r\n            </CardBody>\r\n          </Card>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RegisterReports;"],"sourceRoot":""}
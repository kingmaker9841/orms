{"version":3,"sources":["views/Reports/api.js","views/Reports/api/branch_summary.js","views/Reports/api/risk_trigger.js","views/Reports/api/branch_categorization.js","views/Reports/api/ho_summary.js","views/Reports/util/getDates.js","../node_modules/@linways/table-to-excel/dist sync","views/Reports/HOSummaryReport.js","views/Reports/HOFunctionGrading.js","views/Reports/HOSummary.js"],"names":["url","urlData","log","require","branchSummary","downloadBranchSummary","saveBranchSummary","getRiskTriggers","getRiskTriggerData","branchCategorization","downloadBranchCategorization","saveBranchCategorization","hoSummary","getReportOutputs","options","a","async","server","get","params","json","data","getAllRiskRegister","getAuditLog","callback","then","catch","err","console","error","saveGrading","post","JSON","stringify","riskTrigger","riskTriggerData","bs2ad","ad2bs","moment","QUARTER_ONE","QUARTER_TWO","QUARTER_THREE","QUARTER_FOUR","getFormattedDate","ad","year","month","day","format","getStartQuarter","bs","en","quarter","getQuarter","getQuarterByAD","getBSDate","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","HOSummaryReport","downloadReport","TableToExcel","convert","document","getElementById","name","Card","CardHeader","CardBody","Table","responsive","bordered","data-f-bold","rowSpan","colSpan","className","this","props","map","ho","index","key","riskAreaName","previousRiskScore","estLikelihood","estImpact","Number","riskAreaCode","occurrence","amountTiming","financialImpact","actualRiskScore","CardFooter","Button","color","onClick","React","Component","HOFunctionGrading","saveReport","startDate","type","window","alert","estimatedCategory","previousCategory","actualCategory","state","frequency","status","handleDateChange","value","target","bsDate","length","adDate","setState","Row","Col","md","Label","InputGroup","InputGroupAddon","addonType","Input","onChange","maxLength","minLength","placeholder"],"mappings":"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","file":"static/js/23.b2ebf8a6.chunk.js","sourcesContent":["import { server } from \"../../config/server\";\r\nconst url = \"/report\";\r\nconst urlData = \"/risk-register-all\";\r\nconst log = \"/audit-log\";\r\nconst {\r\n  branchSummary,\r\n  downloadBranchSummary,\r\n  saveBranchSummary\r\n} = require(\"./api/branch_summary\");\r\nconst { getRiskTriggers, getRiskTriggerData } = require(\"./api/risk_trigger\");\r\nconst {\r\n  branchCategorization,\r\n  downloadBranchCategorization,\r\n  saveBranchCategorization\r\n} = require(\"./api/branch_categorization\");\r\nconst { hoSummary } = require(\"./api/ho_summary\");\r\n\r\nasync function getReportOutputs(options) {\r\n  const json = await server.get(`${url}/report-outputs`, {\r\n    params: options\r\n  });\r\n  return json.data;\r\n}\r\n\r\nasync function getAllRiskRegister(options) {\r\n  const json = await server.get(`${urlData}`, { params: options });\r\n  return json.data;\r\n}\r\n\r\nfunction getAuditLog(callback) {\r\n  server\r\n    .get(`${log}`)\r\n    .then(function(json) {\r\n      // console.log(json.data);\r\n      return callback(null, json.data);\r\n    })\r\n    .catch(function(err) {\r\n      console.error(\"Error getting data from all risk Register!\");\r\n    });\r\n}\r\n\r\nasync function saveGrading(data, options) {\r\n  const json = await server.post(`${url}/grading`, {\r\n    ...options,\r\n    data: data\r\n  });\r\n  return json.data;\r\n}\r\n\r\nexport {\r\n  getAllRiskRegister,\r\n  getAuditLog,\r\n  getReportOutputs,\r\n  // BRANCH SUMMARY\r\n  branchSummary,\r\n  downloadBranchSummary,\r\n  saveBranchSummary,\r\n  // BRANCH CATEGORIZATION\r\n  branchCategorization,\r\n  downloadBranchCategorization,\r\n  saveBranchCategorization,\r\n  // HO Summary\r\n  hoSummary,\r\n  //saving report\r\n  saveGrading,\r\n  //Risk Trigger\r\n  getRiskTriggers,\r\n  getRiskTriggerData\r\n};\r\n","import { server } from \"../../../config/server\";\r\nconst url = \"/report\";\r\n\r\n/**\r\n * \r\n * @param {Object} options\r\n * @param {Number} options.branchId   - Branch ID whose report is to be calculated\r\n * @param {Number} options.frequency  - QUARTERLY, HALF_YEARLY, YEARLY (in months)\r\n * @param {String} options.status     - DRAFT, PENDING, UNAPPROVED, APPROVED (Risk Register status)\r\n * @param {String} options.mergeType  - avg, min, max (Merge Function Types)\r\n * @param {Date}   options.startDate    - Base date to calculate the report Data\r\n * \r\n */\r\nasync function branchSummary(options) {\r\n    const json = await server.get(\r\n        `${url}/branch-summary`,\r\n        {\r\n            params: options\r\n        }\r\n    );\r\n    return json.data;\r\n}\r\n\r\nasync function downloadBranchSummary(data) {\r\n    const json = await server.post(\r\n        `${url}/branch-summary/download`,\r\n        JSON.stringify(data)\r\n    );\r\n    return json.data;\r\n}\r\n\r\nasync function saveBranchSummary(data) {\r\n    const json = await server.post(\r\n        `${url}/branch-summary/save`,\r\n        JSON.stringify(data)\r\n    );\r\n    return json.data;\r\n}\r\n\r\nexport {\r\n    branchSummary,\r\n    downloadBranchSummary,\r\n    saveBranchSummary\r\n}\r\n","import { server } from \"../../../config/server\";\r\nconst riskTrigger = \"report/risk-trigger\";\r\nconst riskTriggerData = \"report/risk-trigger/data\";\r\n\r\nasync function getRiskTriggerData(options) {\r\n    return server.get(`${riskTriggerData}`, { params: options });\r\n}\r\n\r\nfunction getRiskTriggers(callback) {\r\n    server\r\n        .get(`${riskTrigger}`)\r\n        .then(function (json) {\r\n            callback(null, json.data);\r\n        })\r\n        .catch(function (err) {\r\n            callback(err);\r\n        });\r\n}\r\n\r\nexport {\r\n    getRiskTriggers,\r\n    getRiskTriggerData,\r\n}","import { server } from \"../../../config/server\";\r\nconst url = \"/report\";\r\n\r\n/**\r\n * \r\n * @param {Object} options\r\n * @param {Number} options.branchId   - Branch ID whose report is to be calculated\r\n * @param {Date}   options.thisQuarter    - Base date to calculate the report Data\r\n * \r\n */\r\nasync function branchCategorization(options) {\r\n    const json = await server.get(\r\n        `${url}/branch-categorization`,\r\n        {\r\n            params: options\r\n        }\r\n    );\r\n    return json.data;\r\n}\r\n\r\nasync function downloadBranchCategorization(data) {\r\n    const json = await server.post(\r\n        `${url}/branch-categorization/download`,\r\n        JSON.stringify(data)\r\n    );\r\n    return json.data;\r\n}\r\n\r\nasync function saveBranchCategorization(data) {\r\n    const json = await server.post(\r\n        `${url}/branch-categorization/save`,\r\n        JSON.stringify(data)\r\n    );\r\n    return json.data;\r\n}\r\n\r\nexport {\r\n    branchCategorization,\r\n    downloadBranchCategorization,\r\n    saveBranchCategorization,\r\n}","import { server } from \"../../../config/server\";\r\nconst url = \"/report\";\r\n\r\n/**\r\n * \r\n * @param {Object} options\r\n * @param {Number} options.frequency  - QUARTERLY, HALF_YEARLY, YEARLY (in months)\r\n * @param {String} options.status     - DRAFT, PENDING, UNAPPROVED, APPROVED (Risk Register status)\r\n * @param {Date}   options.startDate  - Base date to calculate the report Data\r\n * \r\n */\r\nasync function hoSummary(options) {\r\n    const json = await server.get(\r\n        `${url}/ho-summary`,\r\n        {\r\n            params: options\r\n        }\r\n    );\r\n    return json.data;\r\n}\r\n\r\nexport {\r\n    hoSummary\r\n}","const bs2ad = require('ad-bs-converter').bs2ad;\r\nconst ad2bs = require('ad-bs-converter').ad2bs;\r\nconst moment = require('moment');\r\n\r\nconst QUARTER_ONE = \"/04/01\";\r\nconst QUARTER_TWO = \"/07/01\";\r\nconst QUARTER_THREE = \"/10/01\";\r\nconst QUARTER_FOUR = \"/01/01\";\r\n\r\n/**\r\n * \r\n * @param {Object} ad - AD date object converted from bs date using ad-bs-converter \r\n * @returns {String} Well formatted AD Date in YYYY-MM-DD\r\n */\r\nconst getFormattedDate = (ad) => {\r\n    const year = ad.year;\r\n    const month = ad.month;\r\n    const day = ad.day;\r\n    return moment(year + \" \" + month + \" \" + day, \"YYYY MM DD\").format('YYYY-MM-DD');\r\n}\r\n\r\n/**\r\n * @returns Quarter start date in AD of this running month\r\n */\r\nconst getStartQuarter = () => {\r\n    const bs = ad2bs(moment().format(\"YYYY/MM/DD\"));\r\n    const year = bs.en.year;\r\n    const quarter = getQuarter(bs);\r\n    return getFormattedDate(bs2ad(year + quarter));\r\n}\r\n\r\n/**\r\n * \r\n * @param {Date} ad - Well formatted AD Date in YYYY-MM-DD\r\n * @returns Returns in which quarter does the date lies\r\n */\r\nconst getQuarterByAD = (ad) => {\r\n    const bs = ad2bs(moment(ad).format(\"YYYY/MM/DD\"));\r\n    return getQuarter(bs);\r\n}\r\n\r\n/**\r\n * \r\n * @param {Object} bs - Object of BS date from ad-bs-converter\r\n * @returns Returns in which quarter does the date lies\r\n */\r\nconst getQuarter = (bs) => {\r\n    const month = bs.en.month;\r\n    if (month >= 10) {\r\n        return QUARTER_THREE;\r\n    } else if (month >= 7) {\r\n        return QUARTER_TWO;\r\n    } else if (month >= 4) {\r\n        return QUARTER_ONE;\r\n    } else {\r\n        return QUARTER_FOUR;\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * @param {Date} ad Well formatted (YYYY-MM-DD) AD Date\r\n * @returns BS Date object in `en`\r\n */\r\nconst getBSDate = (ad) => {\r\n    const bs = ad2bs(moment(ad).format(\"YYYY/MM/DD\"));\r\n    return bs.en;\r\n}\r\n\r\nexport {\r\n    getStartQuarter,\r\n    getBSDate,\r\n    getQuarterByAD,\r\n    getFormattedDate,\r\n    QUARTER_ONE,\r\n    QUARTER_TWO,\r\n    QUARTER_THREE,\r\n    QUARTER_FOUR,\r\n}","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 607;","import React from \"react\";\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  CardFooter,\r\n  Table,\r\n  Button\r\n} from \"reactstrap\";\r\n\r\nimport { Number } from \"core-js\";\r\nimport TableToExcel from \"@linways/table-to-excel\";\r\n\r\nexport default class HOSummaryReport extends React.Component {\r\n  downloadReport = () => {\r\n    TableToExcel.convert(document.getElementById(\"ho-summary\"), {\r\n      name: \"ho-summary.xlsx\"\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <CardHeader>HO SUMMARY</CardHeader>\r\n        <CardBody>\r\n          <Table responsive bordered id=\"ho-summary\">\r\n            <thead>\r\n              <tr>\r\n                <th data-f-bold rowSpan=\"3\">\r\n                  S.N.\r\n                </th>\r\n                <th data-f-bold rowSpan=\"3\">\r\n                  Risk Area/Functions\r\n                </th>\r\n                <th data-f-bold rowSpan=\"3\">\r\n                  Previous Risk Score (A)\r\n                </th>\r\n                <th data-f-bold colSpan=\"3\">\r\n                  Estimated Risk (SrBL)\r\n                </th>\r\n                <th data-f-bold colSpan=\"5\">\r\n                  Register Summary\r\n                </th>\r\n                <th data-f-bold rowSpan=\"3\">\r\n                  Actual Risk Score (C)\r\n                </th>\r\n                <th data-f-bold colSpan=\"2\">\r\n                  Variance\r\n                </th>\r\n                <th data-f-bold rowSpan=\"3\">\r\n                  Remarks\r\n                </th>\r\n              </tr>\r\n              <tr>\r\n                <th data-f-bold rowSpan=\"2\">\r\n                  Likelihood\r\n                </th>\r\n                <th data-f-bold rowSpan=\"2\">\r\n                  Impact\r\n                </th>\r\n                <th data-f-bold rowSpan=\"2\">\r\n                  Risk Score (B)\r\n                </th>\r\n                <th data-f-bold rowSpan=\"2\">\r\n                  R. Number\r\n                </th>\r\n                <th data-f-bold rowSpan=\"2\">\r\n                  Occurrence\r\n                </th>\r\n                <th data-f-bold colSpan=\"3\">\r\n                  Consequence\r\n                </th>\r\n                <th data-f-bold rowSpan=\"2\" className=\"text-nowrap\">\r\n                  (A - C)\r\n                </th>\r\n                <th data-f-bold rowSpan=\"2\" className=\"text-nowrap\">\r\n                  (B - C)\r\n                </th>\r\n              </tr>\r\n              <tr>\r\n                <th data-f-bold>Amount/Timing</th>\r\n                <th data-f-bold>Financial Impact</th>\r\n                <th data-f-bold>Non Financial Impact</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.props.hoSummary.map((ho, index) => {\r\n                return (\r\n                  <tr key={index}>\r\n                    <td>{index + 1}</td>\r\n                    <td>{ho.riskAreaName}</td>\r\n                    <td>{ho.previousRiskScore}</td>\r\n                    <td>{ho.estLikelihood}</td>\r\n                    <td>{ho.estImpact}</td>\r\n                    <td>{Number(ho.estLikelihood) * Number(ho.estImpact)}</td>\r\n                    <td>{ho.riskAreaCode}</td>\r\n                    <td>{ho.occurrence}</td>\r\n                    <td>{ho.amountTiming}</td>\r\n                    <td>{ho.financialImpact}</td>\r\n                    <td></td>\r\n                    <td>{ho.actualRiskScore}</td>\r\n                    <td>\r\n                      {Number(ho.previousRiskScore) -\r\n                        Number(ho.actualRiskScore)}\r\n                    </td>\r\n                    <td>\r\n                      {Number(ho.estLikelihood) * Number(ho.estImpact) -\r\n                        Number(ho.actualRiskScore)}\r\n                    </td>\r\n                    <td></td>\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </Table>\r\n        </CardBody>\r\n        <CardFooter>\r\n          <Button className=\"mx-2\" color=\"info\" onClick={this.downloadReport}>\r\n            <i className=\"fa fa-download text-white\" />\r\n          </Button>\r\n        </CardFooter>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {\r\n    Card, CardHeader, CardBody, CardFooter,\r\n    Table, Button,\r\n} from 'reactstrap';\r\nimport TableToExcel from '@linways/table-to-excel';\r\nimport { saveGrading } from './api';\r\n\r\nexport default class HOFunctionGrading extends React.Component {\r\n\r\n    downloadReport = () => {\r\n        TableToExcel.convert(document.getElementById(\"function-grading\"), {\r\n            name: 'function-grading.xlsx'\r\n        });\r\n    }\r\n\r\n    saveReport = () => {\r\n        const data = this.props.hoSummary.map((ho, index) => {\r\n            return {\r\n                // riskAreaId: ho.id,\r\n                // estimatedVsActual: estimated ? estimated : \"\",\r\n                // previousVsActual: previous ? previous : \"\",\r\n            }\r\n        });\r\n        saveGrading(data, {\r\n            startDate: this.props.startDate,\r\n            type: 'function'\r\n        }).then(data => {\r\n            window.alert(data)\r\n        }).catch(() => {\r\n            window.alert(\"Oops! Error occurred\")\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card>\r\n                <CardHeader>\r\n                    Function Wise Grading\r\n                </CardHeader>\r\n                <CardBody>\r\n                    <Table responsive bordered id=\"function-grading\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th data-f-bold rowSpan=\"2\">S.N.</th>\r\n                                <th data-f-bold rowSpan=\"2\">Risk Area/Functions</th>\r\n                                <th data-f-bold rowSpan=\"2\">Estimated</th>\r\n                                <th data-f-bold colSpan=\"2\" className=\"text-center\">Actual</th>\r\n                            </tr>\r\n                            <tr>\r\n                                <th data-f-bold>Previous Quarter</th>\r\n                                <th data-f-bold>This Quarter</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.props.hoSummary.map((ho, index) => {\r\n                                return (\r\n                                    <tr key={index}>\r\n                                        <td>{index + 1}</td>\r\n                                        <td>{ho.riskAreaName}</td>\r\n                                        <td>{ho.estimatedCategory}</td>\r\n                                        <td>{ho.previousCategory}</td>\r\n                                        <td>{ho.actualCategory}</td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    </Table>\r\n                </CardBody>\r\n                <CardFooter>\r\n                    <Button className=\"mx-2\" color=\"info\" onClick={this.downloadReport}>\r\n                        <i className=\"fa fa-download text-white\" />\r\n                    </Button>\r\n                </CardFooter>\r\n            </Card>\r\n        );\r\n    }\r\n\r\n}","import React from \"react\";\r\nimport HOSummaryReport from \"./HOSummaryReport\";\r\nimport HOFunctionGrading from \"./HOFunctionGrading\";\r\nimport { hoSummary } from \"./api\";\r\n\r\nimport {\r\n  Label,\r\n  Col,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  Input,\r\n  Row\r\n} from \"reactstrap\";\r\nimport {\r\n  getStartQuarter,\r\n  getBSDate,\r\n  getQuarterByAD,\r\n  QUARTER_ONE,\r\n  QUARTER_TWO,\r\n  QUARTER_THREE,\r\n  QUARTER_FOUR,\r\n  getFormattedDate\r\n} from \"./util/getDates\";\r\nimport { bs2ad } from \"ad-bs-converter\";\r\nexport default class extends React.Component {\r\n  state = {\r\n    hoSummary: [],\r\n    options: {\r\n      frequency: \"3\",\r\n      status: \"Approved\",\r\n      startDate: getStartQuarter()\r\n    }\r\n  };\r\n\r\n  handleDateChange = async e => {\r\n    const value = e.target.value;\r\n    let bsDate = null;\r\n    switch (e.target.name) {\r\n      case \"quarter\":\r\n        const year = getBSDate(this.state.options.startDate).year;\r\n        bsDate = year + value;\r\n        break;\r\n      case \"year\":\r\n        if (value.length === 4) {\r\n          const quarter = getQuarterByAD(this.state.options.startDate);\r\n          bsDate = value + quarter;\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    const adDate = bsDate ? getFormattedDate(bs2ad(bsDate)) : this.state.options.startDate;\r\n    const options = this.state.options;\r\n    options.startDate = adDate;\r\n    await this.setState({\r\n      options\r\n    });\r\n    await hoSummary(this.state.options)\r\n      .then(({ hoSummary }) => {\r\n        this.setState({ hoSummary });\r\n      })\r\n      .catch(err => { });\r\n  };\r\n\r\n  componentDidMount() {\r\n    hoSummary(this.state.options)\r\n      .then(data => {\r\n\r\n        this.setState(data);\r\n      })\r\n      .catch(err => {\r\n        return\r\n      });\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"animate fadeIn\">\r\n        <Row>\r\n          <Col></Col>\r\n\r\n          <Col md={4}>\r\n            <Label>Quarter Start Date (YYYY/MM/DD)</Label>\r\n            <InputGroup className=\"mb-2\">\r\n              <InputGroupAddon addonType=\"prepend\">\r\n                <Input\r\n                  onChange={this.handleDateChange}\r\n                  value={getQuarterByAD(this.state.options.startDate)}\r\n                  type=\"select\"\r\n                  name=\"quarter\"\r\n                  className=\"font-italic\"\r\n                >\r\n                  <option value=\"\">Select Quarter</option>\r\n                  <option value={QUARTER_ONE}>First Quarter</option>\r\n                  <option value={QUARTER_TWO}>Second Quarter</option>\r\n                  <option value={QUARTER_THREE}>Third Quarter</option>\r\n                  <option value={QUARTER_FOUR}>Fourth Quarter</option>\r\n                </Input>\r\n              </InputGroupAddon>\r\n              <Input\r\n                type=\"number\"\r\n                maxLength=\"4\"\r\n                minLength=\"4\"\r\n                className=\"font-italic\"\r\n                placeholder=\"Year\"\r\n                name=\"year\"\r\n                onChange={this.handleDateChange}\r\n                value={getBSDate(this.state.options.startDate).year}\r\n              />\r\n            </InputGroup>\r\n          </Col>\r\n        </Row>\r\n        <HOSummaryReport hoSummary={this.state.hoSummary} />\r\n        <HOFunctionGrading hoSummary={this.state.hoSummary} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}
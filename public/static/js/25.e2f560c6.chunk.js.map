{"version":3,"sources":["views/Reports/api.js","util/api.js","views/Reports/api/branch_summary.js","views/Reports/api/risk_trigger.js","views/Reports/api/branch_categorization.js","views/Reports/api/ho_summary.js","views/Reports/util/getDates.js","views/Reports/BranchSummary.js"],"names":["url","urlData","log","require","branchSummary","downloadBranchSummary","saveBranchSummary","getRiskTriggers","getRiskTriggerData","branchCategorization","downloadBranchCategorization","saveBranchCategorization","hoSummary","getReportOutputs","options","a","async","server","get","params","json","data","getAllRiskRegister","getAuditLog","callback","then","catch","err","console","error","saveGrading","post","getAll","JSON","stringify","riskTrigger","riskTriggerData","bs2ad","ad2bs","moment","QUARTER_ONE","QUARTER_TWO","QUARTER_THREE","QUARTER_FOUR","getFormattedDate","ad","year","month","day","format","getStartQuarter","bs","en","quarter","getQuarter","getQuarterByAD","getBSDate","BranchSummary","state","branchId","frequency","mergeFunction","status","startDate","branches","riskAreas","activeTab","toggle","tab","setState","handleChange","e","name","target","value","updateData","handleDateChange","bsDate","adDate","overrideValues","split","index","map","b","i","Number","downloadReport","path","window","open","process","saveReport","confirm","alert","message","this","p","props","permissions","className","md","addonType","onChange","type","maxLength","minLength","placeholder","isApprover","isAdmin","branch","id","key","color","onClick","tabs","classnames","active","riskArea","code","tabId","responsive","bordered","style","minWidth","row","riskAreaName","previousRiskScore","estLikelihood","estImpact","riskAreaCode","occurrence","amountTiming","financialImpact","likelihood","max","impact","weight","remarks","recommendation","risk_registers","idx","_","find","transactionDate","riskAreaParticular","nonFinancialImpact","relatedAccount","relatedStaff","tracedDate","tracedBy","rectificationDate","React","Component"],"mappings":"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","file":"static/js/25.e2f560c6.chunk.js","sourcesContent":["import { server } from \"../../config/server\";\r\nconst url = \"/report\";\r\nconst urlData = \"/risk-register-all\";\r\nconst log = \"/audit-log\";\r\nconst {\r\n  branchSummary,\r\n  downloadBranchSummary,\r\n  saveBranchSummary\r\n} = require(\"./api/branch_summary\");\r\nconst { getRiskTriggers, getRiskTriggerData } = require(\"./api/risk_trigger\");\r\nconst {\r\n  branchCategorization,\r\n  downloadBranchCategorization,\r\n  saveBranchCategorization\r\n} = require(\"./api/branch_categorization\");\r\nconst { hoSummary } = require(\"./api/ho_summary\");\r\n\r\nasync function getReportOutputs(options) {\r\n  const json = await server.get(`${url}/report-outputs`, {\r\n    params: options\r\n  });\r\n  return json.data;\r\n}\r\n\r\nasync function getAllRiskRegister(options) {\r\n  const json = await server.get(`${urlData}`, { params: options });\r\n  return json.data;\r\n}\r\n\r\nfunction getAuditLog(callback) {\r\n  server\r\n    .get(`${log}`)\r\n    .then(function(json) {\r\n      // console.log(json.data);\r\n      return callback(null, json.data);\r\n    })\r\n    .catch(function(err) {\r\n      console.error(\"Error getting data from all risk Register!\");\r\n    });\r\n}\r\n\r\nasync function saveGrading(data, options) {\r\n  const json = await server.post(`${url}/grading`, {\r\n    ...options,\r\n    data: data\r\n  });\r\n  return json.data;\r\n}\r\n\r\nexport {\r\n  getAllRiskRegister,\r\n  getAuditLog,\r\n  getReportOutputs,\r\n  // BRANCH SUMMARY\r\n  branchSummary,\r\n  downloadBranchSummary,\r\n  saveBranchSummary,\r\n  // BRANCH CATEGORIZATION\r\n  branchCategorization,\r\n  downloadBranchCategorization,\r\n  saveBranchCategorization,\r\n  // HO Summary\r\n  hoSummary,\r\n  //saving report\r\n  saveGrading,\r\n  //Risk Trigger\r\n  getRiskTriggers,\r\n  getRiskTriggerData\r\n};\r\n","import { server } from '../config/server';\r\n\r\nconst getAll = (callback) => {\r\n    server.get('/all')\r\n        .then(json => {\r\n            callback(null, json.data);\r\n        })\r\n        .catch(err => {\r\n            callback(err);\r\n        })\r\n}\r\n\r\n\r\nexport {\r\n    getAll\r\n}","import { server } from \"../../../config/server\";\r\nconst url = \"/report\";\r\n\r\n/**\r\n * \r\n * @param {Object} options\r\n * @param {Number} options.branchId   - Branch ID whose report is to be calculated\r\n * @param {Number} options.frequency  - QUARTERLY, HALF_YEARLY, YEARLY (in months)\r\n * @param {String} options.status     - DRAFT, PENDING, UNAPPROVED, APPROVED (Risk Register status)\r\n * @param {String} options.mergeType  - avg, min, max (Merge Function Types)\r\n * @param {Date}   options.startDate    - Base date to calculate the report Data\r\n * \r\n */\r\nasync function branchSummary(options) {\r\n    const json = await server.get(\r\n        `${url}/branch-summary`,\r\n        {\r\n            params: options\r\n        }\r\n    );\r\n    return json.data;\r\n}\r\n\r\nasync function downloadBranchSummary(data) {\r\n    const json = await server.post(\r\n        `${url}/branch-summary/download`,\r\n        JSON.stringify(data)\r\n    );\r\n    return json.data;\r\n}\r\n\r\nasync function saveBranchSummary(data) {\r\n    const json = await server.post(\r\n        `${url}/branch-summary/save`,\r\n        JSON.stringify(data)\r\n    );\r\n    return json.data;\r\n}\r\n\r\nexport {\r\n    branchSummary,\r\n    downloadBranchSummary,\r\n    saveBranchSummary\r\n}\r\n","import { server } from \"../../../config/server\";\r\nconst riskTrigger = \"report/risk-trigger\";\r\nconst riskTriggerData = \"report/risk-trigger/data\";\r\n\r\nasync function getRiskTriggerData(options) {\r\n    return server.get(`${riskTriggerData}`, { params: options });\r\n}\r\n\r\nfunction getRiskTriggers(callback) {\r\n    server\r\n        .get(`${riskTrigger}`)\r\n        .then(function (json) {\r\n            callback(null, json.data);\r\n        })\r\n        .catch(function (err) {\r\n            callback(err);\r\n        });\r\n}\r\n\r\nexport {\r\n    getRiskTriggers,\r\n    getRiskTriggerData,\r\n}","import { server } from \"../../../config/server\";\r\nconst url = \"/report\";\r\n\r\n/**\r\n * \r\n * @param {Object} options\r\n * @param {Number} options.branchId   - Branch ID whose report is to be calculated\r\n * @param {Date}   options.thisQuarter    - Base date to calculate the report Data\r\n * \r\n */\r\nasync function branchCategorization(options) {\r\n    const json = await server.get(\r\n        `${url}/branch-categorization`,\r\n        {\r\n            params: options\r\n        }\r\n    );\r\n    return json.data;\r\n}\r\n\r\nasync function downloadBranchCategorization(data) {\r\n    const json = await server.post(\r\n        `${url}/branch-categorization/download`,\r\n        JSON.stringify(data)\r\n    );\r\n    return json.data;\r\n}\r\n\r\nasync function saveBranchCategorization(data) {\r\n    const json = await server.post(\r\n        `${url}/branch-categorization/save`,\r\n        JSON.stringify(data)\r\n    );\r\n    return json.data;\r\n}\r\n\r\nexport {\r\n    branchCategorization,\r\n    downloadBranchCategorization,\r\n    saveBranchCategorization,\r\n}","import { server } from \"../../../config/server\";\r\nconst url = \"/report\";\r\n\r\n/**\r\n * \r\n * @param {Object} options\r\n * @param {Number} options.frequency  - QUARTERLY, HALF_YEARLY, YEARLY (in months)\r\n * @param {String} options.status     - DRAFT, PENDING, UNAPPROVED, APPROVED (Risk Register status)\r\n * @param {Date}   options.startDate  - Base date to calculate the report Data\r\n * \r\n */\r\nasync function hoSummary(options) {\r\n    const json = await server.get(\r\n        `${url}/ho-summary`,\r\n        {\r\n            params: options\r\n        }\r\n    );\r\n    return json.data;\r\n}\r\n\r\nexport {\r\n    hoSummary\r\n}","const bs2ad = require('ad-bs-converter').bs2ad;\r\nconst ad2bs = require('ad-bs-converter').ad2bs;\r\nconst moment = require('moment');\r\n\r\nconst QUARTER_ONE = \"/04/01\";\r\nconst QUARTER_TWO = \"/07/01\";\r\nconst QUARTER_THREE = \"/10/01\";\r\nconst QUARTER_FOUR = \"/01/01\";\r\n\r\n/**\r\n * \r\n * @param {Object} ad - AD date object converted from bs date using ad-bs-converter \r\n * @returns {String} Well formatted AD Date in YYYY-MM-DD\r\n */\r\nconst getFormattedDate = (ad) => {\r\n    const year = ad.year;\r\n    const month = ad.month;\r\n    const day = ad.day;\r\n    return moment(year + \" \" + month + \" \" + day, \"YYYY MM DD\").format('YYYY-MM-DD');\r\n}\r\n\r\n/**\r\n * @returns Quarter start date in AD of this running month\r\n */\r\nconst getStartQuarter = () => {\r\n    const bs = ad2bs(moment().format(\"YYYY/MM/DD\"));\r\n    const year = bs.en.year;\r\n    const quarter = getQuarter(bs);\r\n    return getFormattedDate(bs2ad(year + quarter));\r\n}\r\n\r\n/**\r\n * \r\n * @param {Date} ad - Well formatted AD Date in YYYY-MM-DD\r\n * @returns Returns in which quarter does the date lies\r\n */\r\nconst getQuarterByAD = (ad) => {\r\n    const bs = ad2bs(moment(ad).format(\"YYYY/MM/DD\"));\r\n    return getQuarter(bs);\r\n}\r\n\r\n/**\r\n * \r\n * @param {Object} bs - Object of BS date from ad-bs-converter\r\n * @returns Returns in which quarter does the date lies\r\n */\r\nconst getQuarter = (bs) => {\r\n    const month = bs.en.month;\r\n    if (month >= 10) {\r\n        return QUARTER_THREE;\r\n    } else if (month >= 7) {\r\n        return QUARTER_TWO;\r\n    } else if (month >= 4) {\r\n        return QUARTER_ONE;\r\n    } else {\r\n        return QUARTER_FOUR;\r\n    }\r\n}\r\n\r\n/**\r\n * \r\n * @param {Date} ad Well formatted (YYYY-MM-DD) AD Date\r\n * @returns BS Date object in `en`\r\n */\r\nconst getBSDate = (ad) => {\r\n    const bs = ad2bs(moment(ad).format(\"YYYY/MM/DD\"));\r\n    return bs.en;\r\n}\r\n\r\nexport {\r\n    getStartQuarter,\r\n    getBSDate,\r\n    getQuarterByAD,\r\n    getFormattedDate,\r\n    QUARTER_ONE,\r\n    QUARTER_TWO,\r\n    QUARTER_THREE,\r\n    QUARTER_FOUR,\r\n}","import React from 'react';\r\nimport {\r\n    Nav, NavItem, NavLink,\r\n    Col, Row, Table,\r\n    Input, InputGroup, InputGroupAddon,\r\n    Label, Button,\r\n    Card, CardBody, CardFooter,\r\n    TabContent, TabPane\r\n} from 'reactstrap';\r\nimport classnames from 'classnames';\r\nimport { branchSummary, downloadBranchSummary, saveBranchSummary } from './api';\r\nimport { getAll } from '../../util/api';\r\nimport moment from 'moment';\r\nimport {\r\n    getStartQuarter,\r\n    getBSDate,\r\n    getQuarterByAD,\r\n    QUARTER_ONE,\r\n    QUARTER_TWO,\r\n    QUARTER_THREE,\r\n    QUARTER_FOUR,\r\n    getFormattedDate,\r\n} from './util/getDates';\r\nimport _ from 'lodash';\r\nimport { bs2ad } from 'ad-bs-converter';\r\n\r\nexport default class BranchSummary extends React.Component {\r\n\r\n    state = {\r\n        options: {\r\n            branchId: \"\",\r\n            frequency: 3,\r\n            mergeFunction: 'avg',\r\n            status: \"Approved\",\r\n            startDate: getStartQuarter(),\r\n        },\r\n        branches: [],\r\n        branchSummary: [],\r\n        riskAreas: [],\r\n        activeTab: '1',\r\n    }\r\n\r\n    toggle = tab => {\r\n        if (this.state.activeTab !== tab) this.setState({ activeTab: tab });\r\n    }\r\n\r\n    updateData() {\r\n        branchSummary(this.state.options).then(data => {\r\n            this.setState({\r\n                branchSummary: data.branchSummary,\r\n                riskAreas: data.riskAreas,\r\n            });\r\n        }).catch(err => { });\r\n    }\r\n\r\n    handleChange = e => {\r\n        const name = e.target.name;\r\n        const value = e.target.value;\r\n        const options = this.state.options;\r\n        switch (name) {\r\n            default:\r\n                options[name] = value;\r\n                break;\r\n        }\r\n        this.setState({\r\n            options: options,\r\n        }, () => {\r\n            this.updateData();\r\n        });\r\n    }\r\n\r\n    handleDateChange = e => {\r\n        const value = e.target.value;\r\n        let bsDate = '';\r\n        switch (e.target.name) {\r\n            case \"quarter\":\r\n                const year = getBSDate(this.state.options.startDate).year;\r\n                bsDate = year + value;\r\n                break;\r\n            case \"year\":\r\n                const quarter = getQuarterByAD(this.state.options.startDate);\r\n                bsDate = value + quarter;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        if (value) {\r\n            const adDate = getFormattedDate(bs2ad(bsDate));\r\n            const options = this.state.options;\r\n            options.startDate = adDate;\r\n            this.setState({\r\n                options\r\n            }, () => this.updateData());\r\n        }\r\n    }\r\n\r\n    overrideValues = e => {\r\n        const [name, index] = e.target.name.split('-');\r\n        const branchSummary = this.state.branchSummary.map((b, i) => {\r\n            return i === Number(index) ? { ...b, [name]: e.target.value } : b;\r\n        });\r\n        this.setState({\r\n            branchSummary: branchSummary\r\n        });\r\n    }\r\n\r\n    downloadReport = () => {\r\n        downloadBranchSummary({\r\n            branchSummary: this.state.branchSummary,\r\n            riskAreas: this.state.riskAreas,\r\n            options: this.state.options,\r\n        }).then(data => {\r\n            const path = data.path;\r\n            window.open(process.env.REACT_APP_SERVER_URL + `/${path}`);\r\n        }).catch(() => { });\r\n    }\r\n\r\n\r\n    saveReport = () => {\r\n        if (window.confirm(\"Do you want to save this report?\")) {\r\n            saveBranchSummary({\r\n                branchSummary: this.state.branchSummary,\r\n                options: this.state.options\r\n            }).then(data => {\r\n                window.alert(data.message);\r\n            }).catch(() => { });\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateData();\r\n        getAll((err, data) => {\r\n            if (err) return;\r\n            this.setState({ branches: data.branches });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const p = this.props.permissions;\r\n   \r\n        return (\r\n            <div className=\"animated fadeIn mb-3\">\r\n                <Card>\r\n                    <CardBody>\r\n                        <Row>\r\n                            <Col md={4}>\r\n                                <Label>Quarter Start Date (YYYY/MM/DD)</Label>\r\n                                <InputGroup className=\"mb-2\">\r\n                                    <InputGroupAddon addonType=\"prepend\">\r\n                                        <Input\r\n                                            onChange={this.handleDateChange}\r\n                                            value={getQuarterByAD(this.state.options.startDate)}\r\n                                            type=\"select\"\r\n                                            name=\"quarter\"\r\n                                            className=\"font-italic\">\r\n                                            <option value=''>Select Quarter</option>\r\n                                            <option value={QUARTER_ONE}>First Quarter</option>\r\n                                            <option value={QUARTER_TWO}>Second Quarter</option>\r\n                                            <option value={QUARTER_THREE}>Third Quarter</option>\r\n                                            <option value={QUARTER_FOUR}>Fourth Quarter</option>\r\n                                        </Input>\r\n                                    </InputGroupAddon>\r\n                                    <Input\r\n                                        type=\"number\"\r\n                                        maxLength=\"4\"\r\n                                        minLength=\"4\"\r\n                                        className=\"font-italic\"\r\n                                        placeholder=\"Year\"\r\n                                        name=\"year\"\r\n                                        onChange={this.handleDateChange}\r\n                                        value={getBSDate(this.state.options.startDate).year}\r\n                                    />\r\n                                </InputGroup>\r\n                            </Col>\r\n                            {p.isApprover || p.isAdmin ?\r\n                                <Col md={4}>\r\n                                    <Label>Branch</Label>\r\n                                    <Input type=\"select\" name='branchId' value={this.state.options.branchId} onChange={this.handleChange}>\r\n                                        <option value=\"\">--- Your Branch ---</option>\r\n                                        {this.state.branches.map(branch =>\r\n                                            <option value={branch.id} key={branch.id}>{branch.name}</option>\r\n                                        )}\r\n                                    </Input>\r\n                                </Col> :\r\n                                null}\r\n                            <Col md={4}>\r\n                                <Label>Reporting Frequency</Label>\r\n                                <Input type=\"select\" name='frequency' value={this.state.options.frequency} onChange={this.handleChange}>\r\n                                    <option value='3'>Quarterly</option>\r\n                                    <option value='6'>Half Yearly</option>\r\n                                    <option value='12'>Yearly</option>\r\n                                </Input>\r\n                            </Col>\r\n                            <Col md={4}>\r\n                                <Label>Merge Function</Label>\r\n                                <Input type=\"select\" name='mergeFunction' value={this.state.options.type} onChange={this.handleChange}>\r\n                                    <option value='avg'>Average</option>\r\n                                    <option value='min'>Minimum</option>\r\n                                    <option value='max'>Maximum</option>\r\n                                </Input>\r\n                            </Col>\r\n                        </Row>\r\n                    </CardBody>\r\n                    <CardFooter>\r\n                        <Button className=\"mx-2\" color=\"info\" onClick={this.downloadReport}>\r\n                            <i className=\"fa fa-download text-white\" />\r\n                        </Button>\r\n                        {p.isApprover ?\r\n                            <Button className=\"mx-2\" color=\"success\" onClick={this.saveReport}>\r\n                                <i className=\"fa fa-save text-white\" />\r\n                            </Button>\r\n                            : null}\r\n                    </CardFooter>\r\n                </Card>\r\n                <Nav tabs>\r\n                    <NavItem>\r\n                        <NavLink\r\n                            className={classnames({ active: this.state.activeTab === '1' })}\r\n                            onClick={() => { this.toggle('1'); }}>\r\n                            Branch Summary\r\n                        </NavLink>\r\n                    </NavItem>\r\n                    {this.state.riskAreas.map((riskArea, index) => {\r\n                        return (\r\n                            <NavItem key={index}>\r\n                                <NavLink\r\n                                    className={classnames({ active: this.state.activeTab === index + 1 })}\r\n                                    onClick={() => { this.toggle(index + 1); }}>\r\n                                    {riskArea.code}\r\n                                </NavLink>\r\n                            </NavItem>\r\n                        );\r\n                    })}\r\n                </Nav>\r\n                <TabContent activeTab={this.state.activeTab}>\r\n                    <TabPane tabId=\"1\">\r\n                        <Table responsive bordered>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>S.N.</th>\r\n                                    <th>Risk Areas/Functions</th>\r\n                                    <th>Previous Risk Score (A)</th>\r\n                                    <th>Likelihood(Est.)</th>\r\n                                    <th>Impact(Est.)</th>\r\n                                    <th>Risk Score(Est.) (B)</th>\r\n                                    <th>R. Code</th>\r\n                                    <th>Occurrence</th>\r\n                                    <th>Amount/Timing</th>\r\n                                    <th>Financial Impact</th>\r\n                                    <th>Non-financial Impact</th>\r\n                                    {p.isApprover ?\r\n                                        <>\r\n                                            <th style={{ minWidth: 90 }}>Likelihood</th>\r\n                                            <th style={{ minWidth: 90 }}>Impact</th>\r\n                                        </>\r\n                                        : null}\r\n                                    <th>Actual Risk Score (C)</th>\r\n                                    {p.isApprover ?\r\n                                        <>\r\n                                            <th>Weight</th>\r\n                                            <th>Weighted Risk</th>\r\n                                        </>\r\n                                        : null}\r\n                                    <th style={{ minWidth: 150 }}>Remarks</th>\r\n                                    <th className=\"text-nowrap\">(A-C)</th>\r\n                                    <th className=\"text-nowrap\">(B-C)</th>\r\n                                    <th style={{ minWidth: 150 }}>Recommendation</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {this.state.branchSummary.map((row, index) => {\r\n                                    return (\r\n                                        <tr key={index}>\r\n                                            <td>{index + 1}</td>\r\n                                            <td>{row.riskAreaName}</td>\r\n                                            <td>{row.previousRiskScore}</td>\r\n                                            <td>{row.estLikelihood}</td>\r\n                                            <td>{row.estImpact}</td>\r\n                                            <td>{row.estLikelihood * row.estImpact}</td>\r\n                                            <td>{row.riskAreaCode}</td>\r\n                                            <td>{row.occurrence}</td>\r\n                                            <td>{row.amountTiming}</td>\r\n                                            <td>{row.financialImpact}</td>\r\n                                            <td></td>\r\n                                            {p.isApprover ?\r\n                                                <>\r\n                                                    <td>\r\n                                                        {p.isApprover ?\r\n                                                            <Input\r\n                                                                onChange={this.overrideValues}\r\n                                                                value={row.likelihood}\r\n                                                                type=\"number\"\r\n                                                                max=\"5\"\r\n                                                                name={\"likelihood-\" + index} />\r\n                                                            : row.likelihood}\r\n                                                    </td>\r\n                                                    <td>\r\n                                                        {p.isApprover ?\r\n                                                            <Input\r\n                                                                onChange={this.overrideValues}\r\n                                                                value={row.impact}\r\n                                                                type=\"number\"\r\n                                                                max=\"5\"\r\n                                                                name={\"impact-\" + index} />\r\n                                                            : row.impact}\r\n                                                    </td>\r\n                                                </>\r\n                                                : null}\r\n                                            <td>{row.likelihood * row.impact}</td>\r\n                                            {p.isApprover ?\r\n                                                <>\r\n                                                    <td>{row.weight}</td>\r\n                                                    <td>{(row.likelihood * row.impact * row.weight) / 100}</td>\r\n                                                </>\r\n                                                : null}\r\n                                            <td>\r\n                                                {p.isApprover ?\r\n                                                    <Input\r\n                                                        onChange={this.overrideValues}\r\n                                                        value={row.remarks}\r\n                                                        type=\"text\"\r\n                                                        name={\"remarks-\" + index} />\r\n                                                    : row.remarks}\r\n                                            </td>\r\n                                            <td>{row.previousRiskScore - (row.likelihood * row.impact)}</td>\r\n                                            <td>{row.estLikelihood * row.estImpact - row.likelihood * row.impact}</td>\r\n                                            <td>\r\n                                                {p.isApprover ?\r\n                                                    <Input\r\n                                                        onChange={this.overrideValues}\r\n                                                        value={row.recommendation}\r\n                                                        type=\"text\"\r\n                                                        name={\"recommendation-\" + index} />\r\n                                                    : row.recommendation}\r\n                                            </td>\r\n                                        </tr>\r\n                                    )\r\n                                })}\r\n                            </tbody>\r\n                        </Table>\r\n                    </TabPane>\r\n                    {this.state.riskAreas.map((riskArea, index) => {\r\n                        return (\r\n                            <TabPane key={index} tabId={index + 1}>\r\n                                <Table responsive bordered>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>S.N.</th>\r\n                                            <th>Branch</th>\r\n                                            <th>Transaction Date</th>\r\n                                            <th>Risk Particulars</th>\r\n                                            <th>Risk Trigger</th>\r\n                                            <th>Occurrences</th>\r\n                                            <th>Amount/Timing</th>\r\n                                            <th>Financial Impact</th>\r\n                                            <th>Non-financial Impact</th>\r\n                                            <th>Related Account</th>\r\n                                            <th>Related Staff</th>\r\n                                            <th>Traced Date</th>\r\n                                            <th>Traced By</th>\r\n                                            <th>Rectification Date</th>\r\n                                            <th>Remarks</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {riskArea.risk_registers.map((row, idx) => {\r\n                                            return (\r\n                                                <tr key={idx}>\r\n                                                    <td>{idx + 1}</td>\r\n                                                    <td>{_.find(this.state.branches, { id: row.branchId }).name}</td>\r\n                                                    <td>{moment(row.transactionDate).format(\"Do MM YYYY\")}</td>\r\n                                                    <td>{row.riskAreaParticular}</td>\r\n                                                    <td>{row.riskTrigger}</td>\r\n                                                    <td>{row.occurrence}</td>\r\n                                                    <td>{row.amountTiming}</td>\r\n                                                    <td>{row.financialImpact}</td>\r\n                                                    <td>{row.nonFinancialImpact}</td>\r\n                                                    <td>{row.relatedAccount}</td>\r\n                                                    <td>{row.relatedStaff}</td>\r\n                                                    <td>{moment(row.tracedDate).format(\"Do MM YYYY\")}</td>\r\n                                                    <td>{row.tracedBy}</td>\r\n                                                    <td>{moment(row.rectificationDate).format(\"Do MM YYYY\")}</td>\r\n                                                    <td>{row.remarks}</td>\r\n                                                </tr>\r\n                                            )\r\n                                        })}\r\n                                    </tbody>\r\n                                </Table>\r\n                            </TabPane>\r\n                        )\r\n                    })}\r\n                </TabContent>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}"],"sourceRoot":""}